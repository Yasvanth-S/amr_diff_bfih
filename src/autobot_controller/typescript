Script started on 2022-09-13 14:53:25+0530
[1m[3m%[23m[1m[0m                                                                                                                                                                                                                                                                               k..ot_controller\[0m[23m[24m[J[01;32mâžœ  [36mautobot_controller[00m [01;34mgit:([31mmaster[34m) [33mâœ—[00m [K[?1h=[?2004hscripts[?1l>[?2004l
kscripts\[1m[3m%[23m[1m[0m                                                                                                                                                                                                                                                                               k..oller/scripts\[0m[23m[24m[J[01;32mâžœ  [36mscripts[00m [01;34mgit:([31mmaster[34m) [33mâœ—[00m [K[?1h=[?2004hvvim 
[J[01;32mdiff_tf.py[0m*        [J[01;32mencoder_value.py[0m*  [J[01;32mvel_to_motor.py[0m* [JM[0m[23m[24m[26Cvim[K[1Cdiff_tf.py
[J[7mdiff_tf.py*      [0m  [J[01;32mencoder_value.py[0m*  [J[01;32mvel_to_motor.py[0m* [JM[0m[23m[24m[26Cvim diff_tf.py[K
[7mdiff_tf.py*      [0m  [7mdiff_tf.py*      [0m  M[0m[23m[24m[26Cvim diff_tf.py[K[10Dencoder_value.py
[19C[7mencoder_value.py*[0m  [01;32mdiff_tf.py[0m*        M[0m[23m[24m[26Cvim encoder_value.py[K
[JM[46C[1m [0m[0m [?1l>[?2004l
[Jkvim\[?1049h[?1h=[1;66r[23m[24m[0m[H[J[?25l[66;1H[1m[37m[41mE325: ATTENTION[0m
Found a swap file by the name ".encoder_value.py.swp"
[10Cowned by: bharatfih   dated: Mon Sep 12 12:42:43 2022
[9Cfile name: ~bharatfih/autobot_ws/src/autobot/scripts/encoder_value.py
[10Cmodified: no
[9Cuser name: bharatfih   host name: bharatfih-desktop
[8Cprocess ID: 25045
While opening file "encoder_value.py"
[13Cdated: Tue Sep 13 14:49:00 2022
      NEWER than swap file!

(1) Another program may be editing the same file.  If this is the case,
    be careful not to end up with two different instances of the same
    file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
    If this is the case, use ":recover" or "vim -r encoder_value.py"
    to recover the changes (see ":help recovery").
    If you did this already, delete the swap file ".encoder_value.py.swp"
    to avoid this message.

[32mSwap file ".encoder_value.py.swp" already exists![0m
[32m[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort: [34h[?25h[0m[66;1H[K[?25l[66;1H"encoder_value.py" 97L, 3108C[1;1H[34m#!/usr/bin/python

#REFERENCE CODE FROM ENCODER PRODUCT PAGE ROBU.IN ORANGE ROTORY ENCODER[0m

[35mimport[0m rospy
[35mimport[0m Jetson.GPIO [33mas[0m GPIO
[35mfrom[0m std_msgs.msg [35mimport[0m Int32

[34m#Encoder Left - Use only PULL-UP GPIO PINS!!![0m

l_encoder_a = [31m31[0m
l_encoder_b = [31m29[0m

[34m#Encoder Right - Use only PULL-UP GPIO PINS!!!! 31,12,29[0m
r_encoder_a = [31m7[0m
r_encoder_b = [31m13[0m


GPIO.setmode(GPIO.BOARD)


GPIO.setup(l_encoder_a, GPIO.IN)
GPIO.setup(l_encoder_b, GPIO.IN)
GPIO.setup(l_encoder_b, GPIO.IN)
GPIO.setup(r_encoder_b, GPIO.IN)

[33mclass[0m [36mencoder_value[0m:
    [33mdef[0m [36m__init__[0m(self):[29;9Hrospy.init_node([31m"encoder_value"[0m)[30;9Hself.l_enc_pub = rospy.Publisher([31m"left_encoder"[0m, Int32, queue_size=[31m10[0m)[31;9Hself.r_enc_pub = rospy.Publisher([31m"right_encoder"[0m, Int32, queue_size=[31m10[0m)[32;9Hself.lastEncoded_l = [31m0[0m[33;9Hself.encoderValue_l = [31m0[0m[34;9Hself.MSB_l = [31m0[0m[35;9Hself.LSB_l = [31m0[0m[36;9Hself.sum_l = [31m0[0m[37;9Hself.encoded_l = [31m0[0m[38;9H[34m#Right encoder[0m[39;9Hself.lastEncoded_r = [31m0[0m[40;9Hself.encoderValue_r = [31m0[0m[41;9Hself.MSB_r = [31m0[0m[42;9Hself.LSB_r = [31m0[0m[43;9Hself.sum_r = [31m0[0m[44;9Hself.encoded_r = [31m0[0m[45;1H[K[46;1H        [36mprint[0m([31m"NODE STARTED"[0m)[46;31H[K[47;9H[34m#Setting interrupts[0m[47;28H[K[48;9H[34m#GPIO.add_event_detect(l_encoder_a, GPIO.BOTH, callback=self.updateEncoder_l, bouncetime = 0)[49;9H#GPIO.add_event_detect(l_encoder_b, GPIO.BOTH, callback=self.updateEncoder_l, bouncetime = 0)[0m[50;9HGPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[51;9HGPIO.add_event_detect(r_encoder_b, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)
   [52;4H[K[53;5H[33mdef[0m [36mupdateEncoder_l[0m(self, channel):[53;41H[K[54;7H  self.MSB_l = GPIO.input(l_encoder_a)[55;9Hself.LSB_l = GPIO.input(l_encoder_b)
        [36mprint[0m([31m"Left MSB = {}"[0m.format(self.MSB_l))[56;52H[K[57;5H    [36mprint[0m([31m"Left LSB = {}"[0m.format(self.LSB_l))[57;50H[K[58;5H    self.encoded_l = (self.MSB_l << [31m1[0m) | self.LSB_l[58;56H[K[59;1H        self.sum_l  = (self.lastEncoded_l << [31m2[0m) | self.encoded_l
        [34m#print("SUM= {}".format(self.sum_l))[0m[60;45H[K[61;5H    [34m#print("Before IF")[0m[61;28H[K[62;5H    [33mif[0m (self.sum_l == [31m13[0m) [33mor[0m (self.sum_l == [31m4[0m) [33mor[0m (self.sum_l == [31m2[0m) [33mor[0m (self.sum_l == [31m11[0m):
                self.encoderValue_l+=[31m1[0m[64;17H[36mprint[0m([31m"+"[0m)
        [33mif[0m (self.sum_l == [31m14[0m) [33mor[0m (self.sum_l == [31m7[0m) [33mor[0m (self.sum_l == [31m1[0m) [33mor[0m (self.sum_l == [31m8[0m):[66;254H1,1[11CTop[1;1H[34h[?25h[?25l[66;254H2,0-1[2;1H[34h[?25h[?25l[66;254H3,1  [3;1H[34h[?25h[?25l[66;254H4,0-1[4;1H[34h[?25h[?25l[66;254H5,1  [5;1H[34h[?25h[?25l[66;254H6[6;1H[34h[?25h[?25l[66;254H7[7;1H[34h[?25h[?25l[66;254H8,0-1[8;1H[34h[?25h[?25l[66;254H9,1  [9;1H[34h[?25h[?25l[66;254H10,0-1[10;1H[34h[?25h[?25l[66;255H1,1  [11;1H[34h[?25h[?25l[66;255H2[12;1H[34h[?25h[?25l[66;255H3,0-1[13;1H[34h[?25h[?25l[66;255H4,1  [14;1H[34h[?25h[?25l[66;255H5[15;1H[34h[?25h[?25l[66;255H6[16;1H[34h[?25h[?25l[66;255H7,0-1[17;1H[34h[?25h[?25l[66;255H8[18;1H[34h[?25h[?25l[66;255H9,1  [19;1H[34h[?25h[?25l[66;255H8,0-1[18;1H[34h[?25h[?25l[66;255H7[17;1H[34h[?25h[?25l[66;255H6,1  [16;1H[34h[?25h[?25l[66;255H5[15;1H[34h[?25h[?25l[66;257H2[15;2H[34h[?25h[?25l[66;257H3[15;3H[34h[?25h[?25l[66;257H4[15;4H[34h[?25h[?25l[66;257H5[15;5H[34h[?25h[?25l[66;257H6[15;6H[34h[?25h[?25l[66;257H7[15;7H[34h[?25h[?25l[66;257H8[15;8H[34h[?25h[?25l[66;257H9[15;9H[34h[?25h[?25l[66;257H10[15;10H[34h[?25h[?25l[66;258H1[15;11H[34h[?25h[?25l[66;258H2[15;12H[34h[?25h[?25l[66;258H3[15;13H[34h[?25h[?25l[66;258H4[15;14H[34h[?25h[?25l[66;258H5[15;15H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,15[9CTop[15;15H[34h[?25h[?25l[66;258H6[15;16H[34h[?25h[?25l[66;255H6[16;16H[34h[?25h[?25l[66;258H7[16;17H[34h[?25h[?25l[16;16H[K[66;258H6[16;16H[34h[?25h[?25l[31m1[0m[66;258H7[16;17H[34h[?25h[66;1H[K[?25l[66;254H16,16[9CTop[16;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 97L, 3108C written[216C16,16[9CTop[66;254H[K[66;254H16,16[9CTop[16;16H[34h[?25h[?25l[66;255H7,0-1[17;1H[34h[?25h[?25l[66;255H8[18;1H[34h[?25h[?25l[66;255H9,16 [19;16H[34h[?25h[?25l[66;254H20,0-1[20;1H[34h[?25h[?25l[66;255H1[21;1H[34h[?25h[?25l[66;255H2,16 [22;16H[34h[?25h[?25l[66;255H3[23;16H[34h[?25h[?25l[66;255H4[24;16H[34h[?25h[?25l[66;255H5[25;16H[34h[?25h[?25l[66;255H6,0-1[26;1H[34h[?25h[?25l[66;255H7,16 [27;16H[34h[?25h[?25l[66;255H8[28;16H[34h[?25h[?25l[66;255H9[29;16H[34h[?25h[?25l[66;254H30[30;16H[34h[?25h[?25l[66;255H1,9-16[31;16H[34h[?25h[?25l[66;255H2[32;16H[34h[?25h[?25l[66;255H3,16  [33;16H[34h[?25h[?25l[66;255H4[34;16H[34h[?25h[?25l[66;255H5[35;16H[34h[?25h[?25l[66;255H6,9-16[36;16H[34h[?25h[?25l[66;255H7[37;16H[34h[?25h[?25l[66;255H8[38;16H[34h[?25h[?25l[66;255H9[39;16H[34h[?25h[?25l[66;254H40,16  [40;16H[34h[?25h[?25l[66;255H1[41;16H[34h[?25h[?25l[66;255H2[42;16H[34h[?25h[?25l[66;255H3,9-16[43;16H[34h[?25h[?25l[66;255H4[44;16H[34h[?25h[?25l[66;255H5,0-1 [45;1H[34h[?25h[?25l[66;255H6,9-16[46;16H[34h[?25h[?25l[66;255H7,16  [47;16H[34h[?25h[?25l[66;255H8[48;16H[34h[?25h[?25l[66;255H9[49;16H[34h[?25h[?25l[66;254H50[50;16H[34h[?25h[?25l[66;255H1[51;16H[34h[?25h[?25l[66;255H2,3 [52;3H[34h[?25h[?25l[66;255H3,16[53;16H[34h[?25h[?25l[66;255H4[54;16H[34h[?25h[?25l[66;255H5[55;16H[34h[?25h[?25l[66;255H6[56;16H[34h[?25h[?25l[66;255H7[57;16H[34h[?25h[?25l[66;255H8,9-16[58;16H[34h[?25h[?25l[66;255H9[59;16H[34h[?25h[?25l[66;254H60[60;16H[34h[?25h[?25l[66;255H1[61;16H[34h[?25h[?25l[66;255H2,11-16[62;16H[34h[?25h[?25l[66;255H3,2-16 [63;16H[34h[?25h[?25l[66;255H4[64;16H[34h[?25h[?25l[66;255H5,11-16[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_l-=[31m1[0m[66;1H[K[66;254H66,2-16[8C3%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"-"[0m)[66;254H[K[66;254H67,2-16[8C6%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.lastEncoded_l = self.encoded_l[66;254H[K[66;254H68,11-16[7C9%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.l_enc_pub.publish(self.encoderValue_l)[66;254H[K[66;254H69,9-16[7C12%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[66;254H[K[66;254H70,0-1[8C15%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;5H[33mdef[0m [36mupdateEncoder_r[0m(self, channel):[66;254H[K[66;254H71,16[9C18%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.MSB_r = GPIO.input(r_encoder_a)[66;254H[K[66;254H72,16[9C21%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.LSB_r = GPIO.input(r_encoder_b)[66;254H[K[66;254H73,16[9C25%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right MSB = {}"[0m.format(self.MSB_r))[66;254H[K[66;254H74,16[9C28%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right LSB = {}"[0m.format(self.LSB_r))[66;254H[K[66;254H75,16[9C31%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.encoded_r = (self.MSB_r << [31m1[0m) | self.LSB_r[66;254H[K[66;254H76,9-16[7C34%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.sum_r  = (self.lastEncoded_r << [31m2[0m) | self.encoded_r[66;254H[K[66;254H77,9-16[7C37%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("SUM= {}".format(self.sum_r))[0m[66;254H[K[66;254H78,9-16[7C40%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("Before IF")[0m[66;254H[K[66;254H79,9-16[7C43%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mif[0m (self.sum_r == [31m13[0m) [33mor[0m (self.sum_r == [31m4[0m) [33mor[0m (self.sum_r == [31m2[0m) [33mor[0m (self.sum_r == [31m11[0m):[66;254H[K[66;254H80,11-16      46%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_r+=[31m1[0m[66;254H[K[66;254H81,2-16[7C50%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"+"[0m)[66;254H[K[66;254H82,2-16[7C53%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mif[0m (self.sum_r == [31m14[0m) [33mor[0m (self.sum_r == [31m7[0m) [33mor[0m (self.sum_r == [31m1[0m) [33mor[0m (self.sum_r == [31m8[0m):[66;254H[K[66;254H83,11-16      56%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_r-=[31m1[0m[66;254H[K[66;254H84,2-16[7C59%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"-"[0m)[66;254H[K[66;254H85,2-16[7C62%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.lastEncoded_r = self.encoded_r[66;254H[K[66;254H86,11-16      65%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.r_enc_pub.publish(self.encoderValue_r)[66;254H[K[66;254H87,9-16[7C68%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[66;254H[K[66;254H88,0-1[8C71%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[66;254H[K[66;254H89,0-1[8C75%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;1H[33mif[0m __name__ == [31m"__main__"[0m:[66;254H[K[66;254H90,16[9C78%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;5H[33mtry[0m:[66;254H[K[66;254H91,8[10C81%[65;8H[34h[?25h[?25l[66;255H0,16[64;16H[34h[?25h[?25l[66;254H89,0-1[63;1H[34h[?25h[?25l[66;255H8[62;1H[34h[?25h[?25l[66;255H7,9-16[61;16H[34h[?25h[?25l[66;255H6,11-16[60;16H[34h[?25h[?25l[66;255H5,2-16 [59;16H[34h[?25h[?25l[66;255H4[58;16H[34h[?25h[?25l[66;255H3,11-16[57;16H[34h[?25h[?25l[66;255H2,2-16 [56;16H[34h[?25h[?25l[66;255H1[55;16H[34h[?25h[?25l[66;255H0,11-16[54;16H[34h[?25h[?25l[66;254H79,9-16 [53;16H[34h[?25h[?25l[66;254H80,11-16[54;16H[34h[?25h[?25l[66;254H79,9-16 [53;16H[34h[?25h[?25l[66;255H8[52;16H[34h[?25h[?25l[66;255H7[51;16H[34h[?25h[?25l[66;255H6[50;16H[34h[?25h[?25l[66;255H5,16  [49;16H[34h[?25h[?25l[66;255H4[48;16H[34h[?25h[?25l[66;255H3[47;16H[34h[?25h[?25l[66;255H2[46;16H[34h[?25h[?25l[66;255H1[45;16H[34h[?25h[?25l[66;255H0,0-1[44;1H[34h[?25h[?25l[66;254H69,9-16[43;16H[34h[?25h[?25l[66;255H8,11-16[42;16H[34h[?25h[?25l[66;255H7,2-16 [41;16H[34h[?25h[?25l[66;255H6[40;16H[34h[?25h[?25l[66;255H5,11-16[39;16H[34h[?25h[?25l[66;255H4,2-16 [38;16H[34h[?25h[?25l[66;255H3[37;16H[34h[?25h[?25l[66;255H2,11-16[36;16H[34h[?25h[?25l[66;255H1,9-16 [35;16H[34h[?25h[?25l[66;255H0[34;16H[34h[?25h[?25l[66;254H59[33;16H[34h[?25h[?25l[66;255H8[32;16H[34h[?25h[?25l[66;255H7,16  [31;16H[34h[?25h[?25l[66;255H6[30;16H[34h[?25h[?25l[66;255H5[29;16H[34h[?25h[?25l[66;255H4[28;16H[34h[?25h[?25l[66;255H3[27;16H[34h[?25h[?25l[66;255H2,3 [26;3H[34h[?25h[?25l[66;255H1,16[25;16H[34h[?25h[?25l[66;255H0[24;16H[34h[?25h[?25l[66;254H49[23;16H[34h[?25h[?25l[66;255H8[22;16H[34h[?25h[?25l[66;255H7[21;16H[34h[?25h[?25l[66;255H8[22;16H[34h[?25h[?25l[66;255H9[23;16H[34h[?25h[?25l[66;254H50[24;16H[34h[?25h[?25l[66;255H1[25;16H[34h[?25h[?25l[66;255H2,3 [26;3H[34h[?25h[?25l[66;255H3,16[27;16H[34h[?25h[?25l[66;255H4[28;16H[34h[?25h[?25l[66;255H5[29;16H[34h[?25h[?25l[66;255H4[28;16H[34h[?25h[?25l[66;255H3[27;16H[34h[?25h[?25l[66;255H2,3 [26;3H[34h[?25h[?25l[66;255H1,16[25;16H[34h[?25h[?25l[66;255H0[24;16H[34h[?25h[?25l[66;258H5[24;15H[34h[?25h[?25l[66;258H4[24;14H[34h[?25h[?25l[66;258H3[24;13H[34h[?25h[?25l[66;258H2[24;12H[34h[?25h[?25l[66;258H1[24;11H[34h[?25h[?25l[66;258H0[24;10H[34h[?25h[?25l[66;257H9 [24;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;254H[K[66;254H50,9[10C81%[24;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = 0)[0m[66;257H10[24;10H[34h[?25h[?25l[66;255H1[25;10H[34h[?25h[?25l[66;257H9 [25;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_b, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = 0)[0m[66;257H10[25;10H[34h[?25h[?25l[66;255H2,4 [26;4H[34h[?25h[?25l[66;257H5-9[26;9H[34h[?25h[?25l[27;65r[27;1H[L[1;66r[66;254H[K[66;254H53,1[10C78%[27;1H[34h[?25h[?25l[66;257H2-9[27;9H[34h[?25h[?25lG[66;257H3-10[27;10H[34h[?25h[?25lP[66;257H4-11[27;11H[34h[?25h[?25lI[66;257H5-12[27;12H[34h[?25h[?25lO[66;257H6-13[27;13H[34h[?25h[?25l.[66;257H7-14[27;14H[34h[?25h[?25la[66;257H8-15[27;15H[34h[?25h[?25ld[66;257H9-16[27;16H[34h[?25h[?25l[27;15H[K[66;257H8-15[27;15H[34h[?25h[?25l[27;14H[K[66;257H7-14[27;14H[34h[?25h[?25lev[66;257H9-16[27;16H[34h[?25h[?25le[66;257H10-17[27;17H[34h[?25h[?25ln[66;258H1-18[27;18H[34h[?25h[?25lt[66;258H2-19[27;19H[34h[?25h[?25l_[66;258H3-20[27;20H[34h[?25h[?25lde[66;258H5-22[27;22H[34h[?25h[?25lt[66;258H6-23[27;23H[34h[?25h[?25le[66;258H7-24[27;24H[34h[?25h[?25lt[66;258H8-25[27;25H[34h[?25h[?25l[27;24H[K[66;258H7-24[27;24H[34h[?25h[?25lc[66;258H8-25[27;25H[34h[?25h[?25lt[66;258H9-26[27;26H[34h[?25h[?25le[66;257H20-27[27;27H[34h[?25h[?25ld[66;258H1-28[27;28H[34h[?25h[?25l([66;258H2-29[27;29H[34h[?25h[?25l)[46m()[0m[66;258H3-30[27;30H[34h[?25h[?25l[66;258H2-29[27;29H[34h[?25h[?25l[66;258H1-28[27;28H[34h[?25h[?25l()[66;258H0-27[27;27H[34h[?25h[?25l[66;257H19-26[27;26H[34h[?25h[?25l[66;258H6-23[27;23H[34h[?25h[?25l[66;258H5-22[27;22H[34h[?25h[?25l[66;258H4-21[27;21H[34h[?25h[?25l[66;258H3-20[27;20H[34h[?25h[?25l[66;258H2-19[27;19H[34h[?25h[?25l[66;258H1-18[27;18H[34h[?25h[?25l[66;258H0-17[27;17H[34h[?25h[?25l[66;257H9-16 [27;16H[34h[?25h[?25l[66;257H8-15[27;15H[34h[?25h[?25l[66;257H7-14[27;14H[34h[?25h[?25laevent_detected()[66;257H8-15[27;15H[34h[?25h[?25ldevent_detected()[66;257H9-16[27;16H[34h[?25h[?25ldevent_detected()[66;257H10-17[27;17H[34h[?25h[?25l_event_detected()[66;258H1-18[27;18H[34h[?25h[?25l[66;258H2-19[27;19H[34h[?25h[?25l[66;258H3-20[27;20H[34h[?25h[?25l[66;258H8-25[27;25H[34h[?25h[?25l[66;258H9-26[27;26H[34h[?25h[?25l[66;257H20-27[27;27H[34h[?25h[?25l[66;258H1-28[27;28H[34h[?25h[?25l[66;258H2-29[27;29H[34h[?25h[?25l[66;258H3-30[27;30H[34h[?25h[?25l[66;258H4-31[27;31H[34h[?25h[?25ld[46m()[0m[66;258H5-32[27;32H[34h[?25h[?25l([46m)[0m[27;33H[K[27;31H[46m([0m[66;258H4-31[27;31H[34h[?25h[?25l([46m)[0m[27;32H[K[27;30H[46m([0m[66;258H3-30[27;30H[34h[?25h[?25l[66;258H4-31[27;31H[34h[?25h[?25l[46mr[0m)r[46m)[0m[66;258H5-32[27;32H[34h[?25h[?25l[46m_[0m)_[46m)[0m[66;258H6-33[27;33H[34h[?25h[?25l[46me[0m)e[46m)[0m[66;258H7-34[27;34H[34h[?25h[?25l[46mn[0m)n[46m)[0m[66;258H8-35[27;35H[34h[?25h[?25l[46mc[0m)c[46m)[0m[66;258H9-36[27;36H[34h[?25h[?25l[46mo[0m)o[46m)[0m[66;257H30-37[27;37H[34h[?25h[?25l[46md[0m)d[46m)[0m[66;258H1-38[27;38H[34h[?25h[?25l[46me[0m)e[46m)[0m[66;258H2-39[27;39H[34h[?25h[?25l[46mr[0m)r[46m)[0m[66;258H3-40[27;40H[34h[?25h[?25l[46m_[0m)_[46m)[0m[66;258H4-41[27;41H[34h[?25h[?25l[46ma[0m)a[46m)[0m[66;258H5-42[27;42H[34h[?25h[?25l[46m,[0m),[46m)[0m[66;258H6-43[27;43H[34h[?25h[?25l[46m [0m) [46m)[0m[66;258H7-44[27;44H[34h[?25h[?25l[46mG[0m)G[46m)[0m[66;258H8-45[27;45H[34h[?25h[?25l[46mP[0m)P[46m)[0m[66;258H9-46[27;46H[34h[?25h[?25l[46mI[0m)I[46m)[0m[66;257H40-47[27;47H[34h[?25h[?25l[46mO[0m)O[46m)[0m[66;258H1-48[27;48H[34h[?25h[?25l[46m.[0m).[46m)[0m[66;258H2-49[27;49H[34h[?25h[?25l[46mB[0m)B[46m)[0m[66;258H3-50[27;50H[34h[?25h[?25l[46mO[0m)O[46m)[0m[66;258H4-51[27;51H[34h[?25h[?25l[46mT[0m)T[46m)[0m[66;258H5-52[27;52H[34h[?25h[?25l[46mH[0m)H[46m)[0m[66;258H6-53[27;53H[34h[?25h[?25l[66;258H7-54[27;54H[34h[?25h[?25l[28;65r[28;1H[L[1;66r[66;254H[K[66;254H54,1[10C76%[27;30H([22C)
[34h[?25h[?25l[66;257H2-9[28;9H[34h[?25h[?25li[66;257H3-10[28;10H[34h[?25h[?25l[33mif[0m[66;257H4-11[28;11H[34h[?25h[?25l[66;257H5-12[28;12H[34h[?25h[?25lG[66;257H6-13[28;13H[34h[?25h[?25lP[66;257H7-14[28;14H[34h[?25h[?25lI[66;257H8-15[28;15H[34h[?25h[?25lO[66;257H9-16[28;16H[34h[?25h[?25l.[66;257H10-17[28;17H[34h[?25h[?25le[66;258H1-18[28;18H[34h[?25h[?25lv[66;258H2-19[28;19H[34h[?25h[?25le[66;258H3-20[28;20H[34h[?25h[?25ln[66;258H4-21[28;21H[34h[?25h[?25lt[66;258H5-22[28;22H[34h[?25h[?25l_[66;258H6-23[28;23H[34h[?25h[?25ld[66;258H7-24[28;24H[34h[?25h[?25le[66;258H8-25[28;25H[34h[?25h[?25lt[66;258H9-26[28;26H[34h[?25h[?25le[66;257H20-27[28;27H[34h[?25h[?25lc[66;258H1-28[28;28H[34h[?25h[?25lt[66;258H2-29[28;29H[34h[?25h[?25le[66;258H3-30[28;30H[34h[?25h[?25ld[66;258H4-31[28;31H[34h[?25h[?25l([66;258H5-32[28;32H[34h[?25h[?25l)[46m()[0m[66;258H6-33[28;33H[34h[?25h[?25l[66;258H5-32[28;32H[34h[?25h[?25l[46mC[0m)C[46m)[0m[66;258H6-33[28;33H[34h[?25h[?25l)[28;33H[K[28;32H[46m)[0m[66;258H5-32[28;32H[34h[?25h[?25l[46mc[0m)c[46m)[0m[66;258H6-33[28;33H[34h[?25h[?25l[46mh[0m)h[46m)[0m[66;258H7-34[28;34H[34h[?25h[?25l[46ma[0m)a[46m)[0m[66;258H8-35[28;35H[34h[?25h[?25l[46mn[0m)n[46m)[0m[66;258H9-36[28;36H[34h[?25h[?25l[46mn[0me)ne[46m)[0m[66;257H31-38[28;38H[34h[?25h[?25l[46ml[0m)l[46m)[0m[66;258H2-39[28;39H[34h[?25h[?25l)[28;39H[K[28;38H[46m)[0m[66;258H1-38[28;38H[34h[?25h[?25l)[28;38H[K[28;37H[46m)[0m[66;258H0-37[28;37H[34h[?25h[?25l)[28;37H[K[28;36H[46m)[0m[66;257H29-36[28;36H[34h[?25h[?25l)[28;36H[K[28;35H[46m)[0m[66;258H8-35[28;35H[34h[?25h[?25l)[28;35H[K[28;34H[46m)[0m[66;258H7-34[28;34H[34h[?25h[?25l)[28;34H[K[28;33H[46m)[0m[66;258H6-33[28;33H[34h[?25h[?25l)[28;33H[K[28;32H[46m)[0m[66;258H5-32[28;32H[34h[?25h[?25l[46mr[0m)r[46m)[0m[66;258H6-33[28;33H[34h[?25h[?25l[46m_[0m)_[46m)[0m[66;258H7-34[28;34H[34h[?25h[?25l[46me[0m)e[46m)[0m[66;258H8-35[28;35H[34h[?25h[?25l[46mn[0m)n[46m)[0m[66;258H9-36[28;36H[34h[?25h[?25l[46mc[0mo)co[46m)[0m[66;257H31-38[28;38H[34h[?25h[?25l[46md[0m)d[46m)[0m[66;258H2-39[28;39H[34h[?25h[?25l[46me[0m)e[46m)[0m[66;258H3-40[28;40H[34h[?25h[?25l[46mr[0m)r[46m)[0m[66;258H4-41[28;41H[34h[?25h[?25l[46m-[0m)-[46m)[0m[66;258H5-42[28;42H[34h[?25h[?25l[46ma[0m)a[46m)[0m[66;258H6-43[28;43H[34h[?25h[?25l)[28;43H[K[28;42H[46m)[0m[66;258H5-42[28;42H[34h[?25h[?25l)[28;42H[K[28;41H[46m)[0m[66;258H4-41[28;41H[34h[?25h[?25l[46m_[0m)_[46m)[0m[66;258H5-42[28;42H[34h[?25h[?25l[46ma[0m)a[46m)[0m[66;258H6-43[28;43H[34h[?25h[?25l[66;258H7-44[28;44H[34h[?25h[?25l:[28;31H([11C)[66;258H8-45[28;45H[34h[?25h[?25l[29;65r[29;1H[L[1;66r[66;254H[K[66;254H55,1[10C74%[29;1H[34h[?25h[?25l[66;257H2-9[29;9H[34h[?25h[?25l[66;257H3-17[29;17H[34h[?25h[?25lp[66;257H4-18[29;18H[34h[?25h[?25lrin[66;257H7-21[29;21H[34h[?25h[?25l[36mprint[0m[66;257H8-22[29;22H[34h[?25h[?25l([66;257H9-23[29;23H[34h[?25h[?25l)[46m()[0m[66;257H10-24[29;24H[34h[?25h[?25l[66;257H9-23 [29;23H[34h[?25h[?25l[31m[46m"[0m[31m)
    def updateEncoder_l(self, channel):
        self.MSB_l = GPIO.input(l_encoder_a)
        self.LSB_l = GPIO.input(l_encoder_b)
        print([0m[1CLeft MSB = {}[1C[31m.format(self.MSB_l))
        print([0m[1CLeft LSB = {}[1C[31m.format(self.LSB_l))
        self.encoded_l = (self.MSB_l << 1) | self.LSB_l
        self.sum_l  = (self.lastEncoded_l << 2) | self.encoded_l
        #print("[0mSUM= {}[31m".format(self.sum_l))
        #print("[0mBefore IF[31m")
        if (self.sum_l == 13) or (self.sum_l == 4) or (self.sum_l == 2) or (self.sum_l == 11):
                self.encoderValue_l+=
                print([0m[1C+[1C[31m)
        if (self.sum_l == 14) or (self.sum_l == 7) or (self.sum_l == 1) or (self.sum_l == 8):
                self.encoderValue_l-=
                print([0m[1C-[1C[31m)
        self.lastEncoded_l = self.encoded_l
        self.l_enc_pub.publish(self.encoderValue_l)

    def updateEncoder_r(self, channel):
        self.MSB_r = GPIO.input(r_encoder_a)
        self.LSB_r = GPIO.input(r_encoder_b)
        print([0m[1CRight MSB = {}[1C[31m.format(self.MSB_r))
        print([0m[1CRight LSB = {}[1C[31m.format(self.LSB_r))
        self.encoded_r = (self.MSB_r << 1) | self.LSB_r
        self.sum_r  = (self.lastEncoded_r << 2) | self.encoded_r
        #print("[0mSUM= {}[31m".format(self.sum_r))
        #print("[0mBefore IF[31m")
        if (self.sum_r == 13) or (self.sum_r == 4) or (self.sum_r == 2) or (self.sum_r == 11):
                self.encoderValue_r+=
                print([0m[1C+[1C[31m)
        if (self.sum_r == 14) or (self.sum_r == 7) or (self.sum_r == 1) or (self.sum_r == 8):
                self.encoderValue_r-=
                print([0m[1C-[1C[31m)
        self.lastEncoded_r = self.encoded_r
        self.r_enc_pub.publish(self.encoderValue_r)[0m[29;22H([31m"[0m[66;257H10-24[29;24H[34h[?25h[?25l[31m"[0m)
    [33mdef[0m [36mupdateEncoder_l[0m(self, channel):
        self.MSB_l = GPIO.input(l_encoder_a)
        self.LSB_l = GPIO.input(l_encoder_b)
        [36mprint[0m([1C[31mLeft MSB = {}[0m[1C.format(self.MSB_l))
        [36mprint[0m([1C[31mLeft LSB = {}[0m[1C.format(self.LSB_l))
        self.encoded_l = (self.MSB_l << [1C) | self.LSB_l
        self.sum_l  = (self.lastEncoded_l << [1C) | self.encoded_l
        [34m#print("SUM= {}".format(self.sum_l))[0m
        [34m#print("Before IF")[0m
        [33mif[0m (self.sum_l == [2C) [33mor[0m (self.sum_l == [1C) [33mor[0m (self.sum_l == [1C) [33mor[0m (self.sum_l == [2C):
                self.encoderValue_l+=
                [36mprint[0m([1C[31m+[0m[1C)
        [33mif[0m (self.sum_l == [2C) [33mor[0m (self.sum_l == [1C) [33mor[0m (self.sum_l == [1C) [33mor[0m (self.sum_l == [1C):
                self.encoderValue_l-=
                [36mprint[0m([1C[31m-[0m[1C)
        self.lastEncoded_l = self.encoded_l
        self.l_enc_pub.publish(self.encoderValue_l)

    [33mdef[0m [36mupdateEncoder_r[0m(self, channel):
        self.MSB_r = GPIO.input(r_encoder_a)
        self.LSB_r = GPIO.input(r_encoder_b)
        [36mprint[0m([1C[31mRight MSB = {}[0m[1C.format(self.MSB_r))
        [36mprint[0m([1C[31mRight LSB = {}[0m[1C.format(self.LSB_r))
        self.encoded_r = (self.MSB_r << [1C) | self.LSB_r
        self.sum_r  = (self.lastEncoded_r << [1C) | self.encoded_r
        [34m#print("SUM= {}".format(self.sum_r))[0m
        [34m#print("Before IF")[0m
        [33mif[0m (self.sum_r == [2C) [33mor[0m (self.sum_r == [1C) [33mor[0m (self.sum_r == [1C) [33mor[0m (self.sum_r == [2C):
                self.encoderValue_r+=
                [36mprint[0m([1C[31m+[0m[1C)
        [33mif[0m (self.sum_r == [2C) [33mor[0m (self.sum_r == [1C) [33mor[0m (self.sum_r == [1C) [33mor[0m (self.sum_r == [1C):
                self.encoderValue_r-=
                [36mprint[0m([1C[31m-[0m[1C)
        self.lastEncoded_r = self.encoded_r
        self.r_enc_pub.publish(self.encoderValue_r)[29;22H[46m([2C)[0m[66;258H1-25[29;25H[34h[?25h[?25l([2C)[66;258H0-24[29;24H[34h[?25h[?25l[31mH"[0m)[66;258H1-25[29;25H[34h[?25h[?25l[31me"[0m)[66;258H2-26[29;26H[34h[?25h[?25l[31ml"[0m)[66;258H3-27[29;27H[34h[?25h[?25l[31ml"[0m)[66;258H4-28[29;28H[34h[?25h[?25l[31mo"[0m)[66;258H5-29[29;29H[34h[?25h[66;1H[K[?25l[66;254H55,14-28      74%[29;28H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3213C written[215C55,14-28      74%[66;254H[K[66;254H55,14-28      74%[29;28H[34h[?25h[?25l[66;255H6,28   [30;28H[34h[?25h[?25l[66;255H7[31;28H[34h[?25h[?25l[66;255H8[32;28H[34h[?25h[?25l[66;255H7[31;28H[34h[?25h[?25l[66;255H6[30;28H[34h[?25h[?25l[66;255H5,14-28[29;28H[34h[?25h[?25l[66;255H4,21[28;28H[34h[?25h[?25l[66;255H3[27;28H[34h[?25h[?25l[66;258H0-27[27;27H[34h[?25h[?25l[66;257H19-26[27;26H[34h[?25h[?25l[66;258H8-25[27;25H[34h[?25h[?25l[66;258H7-24[27;24H[34h[?25h[?25l[66;258H6-23[27;23H[34h[?25h[?25l[66;258H5-22[27;22H[34h[?25h[?25l[66;258H4-21[27;21H[34h[?25h[?25l[66;258H3-20[27;20H[34h[?25h[?25l[66;258H2-19[27;19H[34h[?25h[?25l[66;258H1-18[27;18H[34h[?25h[?25l[66;258H0-17[27;17H[34h[?25h[?25l[66;257H9-16 [27;16H[34h[?25h[?25l[66;257H8-15[27;15H[34h[?25h[?25l[66;257H7-14[27;14H[34h[?25h[?25l[66;257H6-13[27;13H[34h[?25h[?25l[66;257H5-12[27;12H[34h[?25h[?25l[66;257H4-11[27;11H[34h[?25h[?25l[66;257H3-10[27;10H[34h[?25h[?25l[66;257H2-9 [27;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H53,2-9[8C74%[27;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_a, GPIO.BOTH)[0m[66;257H3-10[27;10H[34h[?25h[?25l[66;255H4[28;10H[34h[?25h[?25l[66;257H2-9 [28;9H[34h[?25h[?25l[34m#if GPIO.event_detected(r_encoder_a):[0m[66;257H3-10[28;10H[34h[?25h[?25l[66;255H5,2-9 [29;9H[34h[?25h[?25l[34m#       print("Hello")[0m[66;257H3-10[29;10H[34h[?25h[66;1H[K[?25l[66;254H55,2-9[8C74%[29;9H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C55,2-9[8C74%[66;254H[K[66;254H55,2-9[8C74%[29;9H[34h[?25h[?25l[66;255H4[28;9H[34h[?25h[?25l[66;255H3[27;9H[34h[?25h[?25l[66;255H2,4-8[26;8H[34h[?25h[?25l[66;255H1,9  [25;9H[34h[?25h[?25l[66;255H0[24;9H[34h[?25h[?25l[66;254H49[23;9H[34h[?25h[?25l[66;254H50[24;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H50,9[10C74%[24;9H[34h[?25h[?25l[66;257H10[24;10H[34h[?25h[?25lGPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[24;101H[K[66;257H9 [24;9H[34h[?25h[66;1H[K[?25l[66;254H50,8[10C74%[24;8H[34h[?25h[?25l[66;254H49[23;8H[34h[?25h[?25l[66;255H8[22;8H[34h[?25h[?25l[66;255H7[21;8H[34h[?25h[?25l[66;255H6,1-8[20;8H[34h[?25h[?25l[66;255H5,0-1[19;1H[34h[?25h[?25l[66;255H4,1-8[18;8H[34h[?25h[?25l[66;255H3[17;8H[34h[?25h[?25l[66;255H2,8  [16;8H[34h[?25h[?25l[66;255H1[15;8H[34h[?25h[?25l[66;255H0[14;8H[34h[?25h[?25l[66;254H39,1-8[13;8H[34h[?25h[?25l[66;255H8[12;8H[34h[?25h[?25l[66;255H7[11;8H[34h[?25h[?25l[66;255H6[10;8H[34h[?25h[?25l[66;255H5,8  [9;8H[34h[?25h[?25l[66;255H4[8;8H[34h[?25h[?25l[66;255H3[7;8H[34h[?25h[?25l[66;255H2,1-8[6;8H[34h[?25h[?25l[66;255H1[5;8H[34h[?25h[?25l[66;255H0,8  [4;8H[34h[?25h[?25l[66;254H29[3;8H[34h[?25h[?25l[66;255H8[2;8H[34h[?25h[?25l[66;255H7[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H26,0-1[8C71%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(r_encoder_b, GPIO.IN)[66;254H[K[66;254H25,8[10C68%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_b, GPIO.IN)[66;254H[K[66;254H24,8[10C65%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_b, GPIO.IN)[66;254H[K[66;254H23,8[10C62%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_a, GPIO.IN)[66;254H[K[66;254H22,8[10C60%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H21,0-1[8C57%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H20,0-1[8C54%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setmode(GPIO.BOARD)[66;254H[K[66;254H19,8[10C51%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H18,0-1[8C48%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H17,0-1[8C45%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_b = [31m11[0m[66;254H[K[66;254H16,8[10C42%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_a = [31m7[0m[66;254H[K[66;254H15,8[10C40%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#Encoder Right - Use only PULL-UP GPIO PINS!!!! 31,12,29[0m[66;254H[K[66;254H14,8[10C37%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H13,0-1[8C34%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hl_encoder_b = [31m29[0m[66;254H[K[66;254H12,8[10C31%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hl_encoder_a = [31m31[0m[66;254H[K[66;254H11,8[10C28%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H10,0-1[8C25%[1;1H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3215C written[215C10,0-1[8C25%[66;254H[K[66;254H10,0-1[8C25%[1;1H[34h[?25h[?25l[66;255H1,8  [2;8H[34h[?25h[?25l[66;255H2[3;8H[34h[?25h[?25l[66;255H3,0-1[4;1H[34h[?25h[?25l[66;255H4,8  [5;8H[34h[?25h[?25l[66;257H9[5;9H[34h[?25h[?25l[66;255H5[6;9H[34h[?25h[?25l[66;257H10[6;10H[34h[?25h[?25l[66;258H1[6;11H[34h[?25h[?25l[66;258H2[6;12H[34h[?25h[?25l[66;258H3[6;13H[34h[?25h[?25l[66;258H4[6;14H[34h[?25h[?25l[66;258H5[6;15H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,15[9C25%[6;15H[34h[?25h[?25l[66;258H6[6;16H[34h[?25h[?25l[6;15H[K[66;258H5[6;15H[34h[?25h[?25l[31m1[0m[66;258H6[6;16H[34h[?25h[?25l[31m1[0m[66;258H7[6;17H[34h[?25h[?25l:[66;258H8[6;18H[34h[?25h[?25lw[66;258H9[6;19H[34h[?25h[?25l[7;65r[7;1H[L[1;66r[66;254H[K[66;254H16,1[10C25%[7;1H[34h[?25h[?25l[6;65r[65;1H
[1;66r[6;1Hr_encoder_a = [31m11[0m:w[65;5H[33mdef[0m [36mupdateEncoder_r[0m(self, channel):[66;254H[K[66;254H15,19[9C25%[6;19H[34h[?25h[?25l[6;18H[K[66;258H8[6;18H[34h[?25h[?25l[6;17H[K[66;258H7[6;17H[34h[?25h[66;1H[K[6;16H[?25l[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C15,16[9C25%[66;254H[K[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;255H6[7;16H[34h[?25h[?25l[66;255H5[6;16H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;258H7[6;17H[34h[?25h[?25l[6;16H[K[66;258H6[6;16H[34h[?25h[?25l[6;15H[K[66;258H5[6;15H[34h[?25h[?25l[31m1[0m[66;258H6[6;16H[34h[?25h[?25l[31m3[0m[66;258H7[6;17H[34h[?25h[66;1H[K[?25l[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C15,16[9C25%[66;254H[K[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;258H7[6;17H[34h[?25h[?25l[6;16H[K[66;258H6[6;16H[34h[?25h[?25l[31m0[0m[66;258H7[6;17H[34h[?25h[66;1H[K[6;16H[?25l[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;255H6,1 [7;1H[34h[?25h[?25l[66;255H7,0-1[8;1H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C17,0-1[8C25%[66;254H[K[66;254H17,0-1[8C25%[8;1H[34h[?25h[?25l[66;255H6,1  [7;1H[34h[?25h[?25l[66;255H5[6;1H[34h[?25h[?25l[66;257H2[6;2H[34h[?25h[?25l[66;255H4[5;2H[34h[?25h[?25l[66;257H3[5;3H[34h[?25h[?25l[66;257H4[5;4H[34h[?25h[?25l[66;257H5[5;5H[34h[?25h[?25l[66;257H6[5;6H[34h[?25h[?25l[66;257H7[5;7H[34h[?25h[?25l[66;257H8[5;8H[34h[?25h[?25l[66;257H9[5;9H[34h[?25h[?25l[66;257H10[5;10H[34h[?25h[?25l[66;258H1[5;11H[34h[?25h[?25l[66;258H2[5;12H[34h[?25h[?25l[66;258H3[5;13H[34h[?25h[?25l[66;258H4[5;14H[34h[?25h[?25l[66;258H5[5;15H[34h[?25h[?25l[66;255H5[6;15H[34h[?25h[?25l[66;258H6[6;16H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;258H7[6;17H[34h[?25h[?25l[6;16H[K[66;258H6[6;16H[34h[?25h[?25l[6;15H[K[66;258H5[6;15H[34h[?25h[?25l[31m7[0m[66;258H6[6;16H[34h[?25h[66;1H[K[?25l[66;254H15,15[9C25%[6;15H[34h[?25h[?25l[66;255H6[7;15H[34h[?25h[?25l[66;258H6[7;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3215C written[215C16,16[9C25%[66;254H[K[66;254H16,16[9C25%[7;16H[34h[?25h[?25l[66;255H7,0-1[8;1H[34h[?25h[?25l[66;255H6,16 [7;16H[34h[?25h[?25l[66;255H5,15[6;15H[34h[?25h[?25l[66;255H6,16[7;16H[34h[?25h[?25l[66;255H5,15[6;15H[34h[?25h[?25l[66;255H6,16[7;16H[34h[?25h[?25l[66;255H5,15[6;15H[34h[?25h[?25l[66;255H6,16[7;16H[34h[?25h[?25l[66;255H5,15[6;15H[34h[?25h[?25l[66;1H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3215C written[215C15,15[9C25%[66;254H[K[66;254H15,15[9C25%[6;15H[34h[?25h[?25l[66;255H6,16[7;16H[34h[?25h[?25l[66;255H5,15[6;15H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,15[9C25%[6;15H[34h[?25h[?25l[66;258H6[6;16H[34h[?25h[?25l[6;15H[K[66;258H5[6;15H[34h[?25h[?25l[31m1[0m[66;258H6[6;16H[34h[?25h[?25l[31m1[0m[66;258H7[6;17H[34h[?25h[66;1H[K[6;16H[?25l[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C15,16[9C25%[66;254H[K[66;254H15,16[9C25%[6;16H[34h[?25h[?25l[66;255H6[7;16H[34h[?25h[?25l[66;255H7,0-1[8;1H[34h[?25h[?25l[66;255H8[9;1H[34h[?25h[?25l[66;255H9,16 [10;16H[34h[?25h[?25l[66;254H20,0-1[11;1H[34h[?25h[?25l[66;255H1[12;1H[34h[?25h[?25l[66;255H2,16 [13;16H[34h[?25h[?25l[66;255H3[14;16H[34h[?25h[?25l[66;255H4[15;16H[34h[?25h[?25l[66;255H5[16;16H[34h[?25h[?25l[66;255H6,0-1[17;1H[34h[?25h[?25l[66;255H7,16 [18;16H[34h[?25h[?25l[66;255H8[19;16H[34h[?25h[?25l[66;255H9[20;16H[34h[?25h[?25l[66;254H30[21;16H[34h[?25h[?25l[66;255H1,9-16[22;16H[34h[?25h[?25l[66;255H2[23;16H[34h[?25h[?25l[66;255H3,16  [24;16H[34h[?25h[?25l[66;255H4[25;16H[34h[?25h[?25l[66;255H5[26;16H[34h[?25h[?25l[66;255H6,9-16[27;16H[34h[?25h[?25l[66;255H7[28;16H[34h[?25h[?25l[66;255H8[29;16H[34h[?25h[?25l[66;255H9[30;16H[34h[?25h[?25l[66;254H40,16  [31;16H[34h[?25h[?25l[66;255H1[32;16H[34h[?25h[?25l[66;255H2[33;16H[34h[?25h[?25l[66;255H3,9-16[34;16H[34h[?25h[?25l[66;255H4[35;16H[34h[?25h[?25l[66;255H5,0-1 [36;1H[34h[?25h[?25l[66;255H6,9-16[37;16H[34h[?25h[?25l[66;255H7,16  [38;16H[34h[?25h[?25l[66;255H8[39;16H[34h[?25h[?25l[66;255H9[40;16H[34h[?25h[?25l[66;254H50[41;16H[34h[?25h[?25l[66;255H1[42;16H[34h[?25h[?25l[66;255H2,4-8[43;8H[34h[?25h[?25l[66;255H3,9-16[44;16H[34h[?25h[?25l[66;255H4[45;16H[34h[?25h[?25l[66;255H5,3[46;16H[34h[?25h[?25l[66;255H6,16  [47;16H[34h[?25h[?25l[66;255H7[48;16H[34h[?25h[?25l[66;255H8[49;16H[34h[?25h[?25l[66;255H9[50;16H[34h[?25h[?25l[66;254H60[51;16H[34h[?25h[?25l[66;255H1,9-16[52;16H[34h[?25h[?25l[66;255H2[53;16H[34h[?25h[?25l[66;255H3[54;16H[34h[?25h[?25l[66;255H4[55;16H[34h[?25h[?25l[66;255H5,11-16[56;16H[34h[?25h[?25l[66;255H6,2-16 [57;16H[34h[?25h[?25l[66;255H7[58;16H[34h[?25h[?25l[66;255H8,11-16[59;16H[34h[?25h[?25l[66;255H9,2-16 [60;16H[34h[?25h[?25l[66;254H70[61;16H[34h[?25h[?25l[66;255H1,11-16[62;16H[34h[?25h[?25l[66;255H2,9-16 [63;16H[34h[?25h[?25l[66;255H3,0-1 [64;1H[34h[?25h[?25l[66;255H4,16 [65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.MSB_r = GPIO.input(r_encoder_a)[66;1H[K[66;254H75,16[9C28%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.LSB_r = GPIO.input(r_encoder_b)[66;254H[K[66;254H76,16[9C31%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right MSB = {}"[0m.format(self.MSB_r))[66;254H[K[66;254H77,16[9C34%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right LSB = {}"[0m.format(self.LSB_r))[66;254H[K[66;254H78,16[9C37%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.encoded_r = (self.MSB_r << [31m1[0m) | self.LSB_r[66;254H[K[66;254H79,9-16[7C40%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.sum_r  = (self.lastEncoded_r << [31m2[0m) | self.encoded_r[66;254H[K[66;254H80,9-16[7C42%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("SUM= {}".format(self.sum_r))[0m[66;254H[K[66;254H81,9-16[7C45%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("Before IF")[0m[66;254H[K[66;254H82,9-16[7C48%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mif[0m (self.sum_r == [31m13[0m) [33mor[0m (self.sum_r == [31m4[0m) [33mor[0m (self.sum_r == [31m2[0m) [33mor[0m (self.sum_r == [31m11[0m):[66;254H[K[66;254H83,11-16      51%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_r+=[31m1[0m[66;254H[K[66;254H84,2-16[7C54%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"+"[0m)[66;254H[K[66;254H85,2-16[7C57%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mif[0m (self.sum_r == [31m14[0m) [33mor[0m (self.sum_r == [31m7[0m) [33mor[0m (self.sum_r == [31m1[0m) [33mor[0m (self.sum_r == [31m8[0m):[66;254H[K[66;254H86,11-16      60%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_r-=[31m1[0m[66;254H[K[66;254H87,2-16[7C62%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"-"[0m)[66;254H[K[66;254H88,2-16[7C65%[65;16H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.lastEncoded_r = self.encoded_r[66;254H[K[66;254H89,11-16      68%[65;16H[34h[?25h[?25l[66;255H8,2-16 [64;16H[34h[?25h[?25l[66;255H7[63;16H[34h[?25h[?25l[66;255H6,11-16[62;16H[34h[?25h[?25l[66;255H5,2-16 [61;16H[34h[?25h[?25l[66;255H4[60;16H[34h[?25h[?25l[66;255H3,11-16[59;16H[34h[?25h[?25l[66;255H2,9-16 [58;16H[34h[?25h[?25l[66;255H1[57;16H[34h[?25h[?25l[66;255H0[56;16H[34h[?25h[?25l[66;254H79[55;16H[34h[?25h[?25l[66;255H8,16  [54;16H[34h[?25h[?25l[66;255H7[53;16H[34h[?25h[?25l[66;255H6[52;16H[34h[?25h[?25l[66;258H7[52;17H[34h[?25h[?25l[66;258H8[52;18H[34h[?25h[?25l[66;258H7[52;17H[34h[?25h[?25l[66;258H6[52;16H[34h[?25h[?25l[66;258H5[52;15H[34h[?25h[?25l[66;258H4[52;14H[34h[?25h[?25l[66;258H3[52;13H[34h[?25h[?25l[66;258H2[52;12H[34h[?25h[?25l[66;258H1[52;11H[34h[?25h[?25l[66;258H0[52;10H[34h[?25h[?25l[66;257H9 [52;9H[34h[?25h[?25l[66;255H7[53;9H[34h[?25h[?25l[66;255H8[54;9H[34h[?25h[?25l[66;255H9,2-9[55;9H[34h[?25h[?25l[66;254H80[56;9H[34h[?25h[?25l[66;254H79[55;9H[34h[?25h[?25l[66;255H8,9  [54;9H[34h[?25h[?25l[66;255H7[53;9H[34h[?25h[?25l[66;255H6[52;9H[34h[?25h[?25l[66;255H5[51;9H[34h[?25h[?25l[66;255H4[50;9H[34h[?25h[?25l[66;255H3,0-1[49;1H[34h[?25h[?25l[66;255H2,2-9[48;9H[34h[?25h[?25l[66;255H1,4[47;9H[34h[?25h[?25l[66;255H0,2-16[46;16H[34h[?25h[?25l[66;254H69[45;16H[34h[?25h[?25l[66;255H8,4-9 [44;9H[34h[?25h[?25l[66;255H7,2-16[43;16H[34h[?25h[?25l[66;255H6[42;16H[34h[?25h[?25l[66;255H5,4-9 [41;9H[34h[?25h[?25l[66;255H4,2[40;9H[34h[?25h[?25l[66;255H3[39;9H[34h[?25h[?25l[66;255H2[38;9H[34h[?25h[?25l[66;255H1[37;9H[34h[?25h[?25l[66;255H0,9  [36;9H[34h[?25h[?25l[66;254H59[35;9H[34h[?25h[?25l[66;255H8[34;9H[34h[?25h[?25l[66;255H7[33;9H[34h[?25h[?25l[66;255H6[32;9H[34h[?25h[?25l[66;255H5,2-9[31;9H[34h[?25h[?25l[66;255H4[30;9H[34h[?25h[?25l[66;255H3[29;9H[34h[?25h[?25l[66;255H2,4-8[28;8H[34h[?25h[?25l[66;255H1,9  [27;9H[34h[?25h[?25l[66;255H0[26;9H[34h[?25h[?25l[66;254H49[25;9H[34h[?25h[?25l[66;255H8[24;9H[34h[?25h[?25l[66;255H7[23;9H[34h[?25h[?25l[66;255H6,2-9[22;9H[34h[?25h[?25l[66;255H5,0-1[21;1H[34h[?25h[?25l[66;255H4,2-9[20;9H[34h[?25h[?25l[66;255H3[19;9H[34h[?25h[?25l[66;255H2,9  [18;9H[34h[?25h[?25l[66;255H1[17;9H[34h[?25h[?25l[66;255H0[16;9H[34h[?25h[?25l[66;254H39,2-9[15;9H[34h[?25h[?25l[66;255H8[14;9H[34h[?25h[?25l[66;255H7[13;9H[34h[?25h[?25l[66;255H6[12;9H[34h[?25h[?25l[66;255H5,9  [11;9H[34h[?25h[?25l[66;255H4[10;9H[34h[?25h[?25l[66;255H3[9;9H[34h[?25h[?25l[66;255H2,2-9[8;9H[34h[?25h[?25l[66;255H1[7;9H[34h[?25h[?25l[66;255H0,9  [6;9H[34h[?25h[?25l[66;254H29[5;9H[34h[?25h[?25l[66;255H8[4;9H[34h[?25h[?25l[66;255H7[3;9H[34h[?25h[?25l[66;255H6,0-1[2;1H[34h[?25h[?25l[66;255H5,9  [1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_b, GPIO.IN)[66;254H[K[66;254H24,9[10C65%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_b, GPIO.IN)[66;254H[K[66;254H23,9[10C62%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_a, GPIO.IN)[66;254H[K[66;254H22,9[10C60%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H21,0-1[8C57%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H20,0-1[8C54%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setmode(GPIO.BOARD)[66;254H[K[66;254H19,9[10C51%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H18,0-1[8C48%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H17,0-1[8C45%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_b = [31m11[0m[66;254H[K[66;254H16,9[10C42%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_a = [31m11[0m[66;254H[K[66;254H15,9[10C40%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#Encoder Right - Use only PULL-UP GPIO PINS!!!! 31,12,29[0m[66;254H[K[66;254H14,9[10C37%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H13,0-1[8C34%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hl_encoder_b = [31m29[0m[66;254H[K[66;254H12,9[10C31%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hl_encoder_a = [31m31[0m[66;254H[K[66;254H11,9[10C28%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H10,0-1[8C25%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#Encoder Left - Use only PULL-UP GPIO PINS!!![0m[66;254H[K[66;254H9,9[11C22%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H8,0-1[9C20%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[35mfrom[0m std_msgs.msg [35mimport[0m Int32[66;254H[K[66;254H7,9[11C17%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[35mimport[0m Jetson.GPIO [33mas[0m GPIO[66;254H[K[66;254H6,9[11C14%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[35mimport[0m rospy[66;254H[K[66;254H5,9[11C11%[1;9H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H4,0-1[10C8%[1;1H[34h[?25h[?25l[66;254H5,9  [2;9H[34h[?25h[?25l[66;254H6[3;9H[34h[?25h[?25l[66;254H7[4;9H[34h[?25h[?25l[66;254H8,0-1[5;1H[34h[?25h[?25l[66;254H9,9  [6;9H[34h[?25h[?25l[66;254H10,0-1[7;1H[34h[?25h[?25l[66;255H1,9  [8;9H[34h[?25h[?25l[66;255H2[9;9H[34h[?25h[?25l[66;255H3,0-1[10;1H[34h[?25h[?25l[66;255H4,9  [11;9H[34h[?25h[?25l[66;255H5[12;9H[34h[?25h[?25l[66;257H10[12;10H[34h[?25h[?25l[66;258H1[12;11H[34h[?25h[?25l[66;258H2[12;12H[34h[?25h[?25l[66;258H3[12;13H[34h[?25h[?25l[66;258H4[12;14H[34h[?25h[?25l[66;258H5[12;15H[34h[?25h[?25l[66;255H6[13;15H[34h[?25h[?25l[66;258H6[13;16H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;254H[K[66;254H16,16[10C8%[13;16H[34h[?25h[?25l[66;258H7[13;17H[34h[?25h[?25l[13;16H[K[66;258H6[13;16H[34h[?25h[?25l[31m3[0m[66;258H7[13;17H[34h[?25h[66;1H[K[?25l[66;254H16,16[10C8%[13;16H[34h[?25h[?25l[66;255H7,0-1[14;1H[34h[?25h[?25l[66;255H8[15;1H[34h[?25h[?25l[66;255H9,16 [16;16H[34h[?25h[?25l[66;254H20,0-1[17;1H[34h[?25h[?25l[66;255H1[18;1H[34h[?25h[?25l[66;255H2,16 [19;16H[34h[?25h[?25l[66;255H3[20;16H[34h[?25h[?25l[66;255H4[21;16H[34h[?25h[?25l[66;255H5[22;16H[34h[?25h[?25l[66;255H6,0-1[23;1H[34h[?25h[?25l[66;255H7,16 [24;16H[34h[?25h[?25l[66;255H8[25;16H[34h[?25h[?25l[66;255H9[26;16H[34h[?25h[?25l[66;254H30[27;16H[34h[?25h[?25l[66;255H1,9-16[28;16H[34h[?25h[?25l[66;255H2[29;16H[34h[?25h[?25l[66;255H3,16  [30;16H[34h[?25h[?25l[66;255H4[31;16H[34h[?25h[?25l[66;255H5[32;16H[34h[?25h[?25l[66;255H6,9-16[33;16H[34h[?25h[?25l[66;255H7[34;16H[34h[?25h[?25l[66;255H8[35;16H[34h[?25h[?25l[66;255H9[36;16H[34h[?25h[?25l[66;254H40,16  [37;16H[34h[?25h[?25l[66;255H1[38;16H[34h[?25h[?25l[66;255H2[39;16H[34h[?25h[?25l[66;255H3,9-16[40;16H[34h[?25h[?25l[66;255H4[41;16H[34h[?25h[?25l[66;255H5,0-1 [42;1H[34h[?25h[?25l[66;255H6,9-16[43;16H[34h[?25h[?25l[66;255H7,16  [44;16H[34h[?25h[?25l[66;255H8[45;16H[34h[?25h[?25l[66;255H9[46;16H[34h[?25h[?25l[66;254H50[47;16H[34h[?25h[?25l[66;258H5[47;15H[34h[?25h[?25l[66;258H4[47;14H[34h[?25h[?25l[66;258H3[47;13H[34h[?25h[?25l[66;258H2[47;12H[34h[?25h[?25l[66;258H1[47;11H[34h[?25h[?25l[66;258H0[47;10H[34h[?25h[?25l[66;257H9 [47;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;254H[K[66;254H50,9[11C8%[47;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = 0)[0m[66;257H10[47;10H[34h[?25h[?25l[66;255H1[48;10H[34h[?25h[?25lGPIO.add_event_detect(r_encoder_b, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[48;101H[K[66;257H9 [48;9H[34h[?25h[66;1H[K[?25l[66;254H51,8[11C8%[48;8H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C51,8[11C8%[66;254H[K[66;254H51,8[11C8%[48;8H[34h[?25h[?25l[66;255H0[47;8H[34h[?25h[?25l[66;257H9[47;9H[34h[?25h[?25l[66;257H10[47;10H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H50,10[10C8%[47;10H[34h[?25h[?25lGPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[47;101H[K[66;257H9 [47;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = 0)[0m[66;257H10[47;10H[34h[?25h[?25lGPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[47;101H[K[66;257H9 [47;9H[34h[?25h[66;1H[K[47;8H[?25l[66;254H50,8[11C8%[47;8H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3215C written[215C50,8[11C8%[66;254H[K[66;254H50,8[11C8%[47;8H[34h[?25h[?25l[66;254H49[46;8H[34h[?25h[?25l[66;255H8[45;8H[34h[?25h[?25l[66;255H7[44;8H[34h[?25h[?25l[66;255H6,1-8[43;8H[34h[?25h[?25l[66;255H5,0-1[42;1H[34h[?25h[?25l[66;255H4,1-8[41;8H[34h[?25h[?25l[66;255H3[40;8H[34h[?25h[?25l[66;255H2,8  [39;8H[34h[?25h[?25l[66;255H1[38;8H[34h[?25h[?25l[66;255H0[37;8H[34h[?25h[?25l[66;254H39,1-8[36;8H[34h[?25h[?25l[66;255H8[35;8H[34h[?25h[?25l[66;255H7[34;8H[34h[?25h[?25l[66;255H6[33;8H[34h[?25h[?25l[66;255H5,8  [32;8H[34h[?25h[?25l[66;255H4[31;8H[34h[?25h[?25l[66;255H3[30;8H[34h[?25h[?25l[66;255H2,1-8[29;8H[34h[?25h[?25l[66;255H1[28;8H[34h[?25h[?25l[66;255H0,8  [27;8H[34h[?25h[?25l[66;254H29[26;8H[34h[?25h[?25l[66;255H8[25;8H[34h[?25h[?25l[66;255H7[24;8H[34h[?25h[?25l[66;255H6,0-1[23;1H[34h[?25h[?25l[66;255H5,8  [22;8H[34h[?25h[?25l[66;255H4[21;8H[34h[?25h[?25l[66;255H3[20;8H[34h[?25h[?25l[66;255H2[19;8H[34h[?25h[?25l[66;255H1,0-1[18;1H[34h[?25h[?25l[66;255H0[17;1H[34h[?25h[?25l[66;254H19,8  [16;8H[34h[?25h[?25l[66;255H8,0-1[15;1H[34h[?25h[?25l[66;255H7[14;1H[34h[?25h[?25l[66;255H6,8  [13;8H[34h[?25h[?25l[66;255H5[12;8H[34h[?25h[?25l[66;255H6[13;8H[34h[?25h[?25l[66;255H5[12;8H[34h[?25h[?25l[66;257H9[12;9H[34h[?25h[?25l[66;257H10[12;10H[34h[?25h[?25l[66;258H1[12;11H[34h[?25h[?25l[66;258H2[12;12H[34h[?25h[?25l[66;258H3[12;13H[34h[?25h[?25l[66;258H4[12;14H[34h[?25h[?25l[66;258H5[12;15H[34h[?25h[?25l[66;258H6[12;16H[34h[?25h[?25l[66;255H6[13;16H[34h[?25h[?25l[66;255H7,0-1[14;1H[34h[?25h[?25l[66;255H8[15;1H[34h[?25h[?25l[66;255H9,16 [16;16H[34h[?25h[?25l[66;254H20,0-1[17;1H[34h[?25h[?25l[66;255H1[18;1H[34h[?25h[?25l[66;255H2,16 [19;16H[34h[?25h[?25l[66;255H3[20;16H[34h[?25h[?25l[66;255H4[21;16H[34h[?25h[?25l[66;255H5[22;16H[34h[?25h[?25l[66;255H6,0-1[23;1H[34h[?25h[?25l[66;255H7,16 [24;16H[34h[?25h[?25l[66;255H8[25;16H[34h[?25h[?25l[66;255H9[26;16H[34h[?25h[?25l[66;254H30[27;16H[34h[?25h[?25l[66;255H1,9-16[28;16H[34h[?25h[?25l[66;255H2[29;16H[34h[?25h[?25l[66;255H3,16  [30;16H[34h[?25h[?25l[66;255H4[31;16H[34h[?25h[?25l[66;255H5[32;16H[34h[?25h[?25l[66;255H6,9-16[33;16H[34h[?25h[?25l[66;255H7[34;16H[34h[?25h[?25l[66;255H8[35;16H[34h[?25h[?25l[66;255H9[36;16H[34h[?25h[?25l[66;254H40,16  [37;16H[34h[?25h[?25l[66;255H1[38;16H[34h[?25h[?25l[66;255H2[39;16H[34h[?25h[?25l[66;255H3,9-16[40;16H[34h[?25h[?25l[66;255H4[41;16H[34h[?25h[?25l[66;255H5,0-1 [42;1H[34h[?25h[?25l[66;255H6,9-16[43;16H[34h[?25h[?25l[66;255H7,16  [44;16H[34h[?25h[?25l[66;255H8[45;16H[34h[?25h[?25l[66;255H9[46;16H[34h[?25h[?25l[66;254H50[47;16H[34h[?25h[?25l[66;255H1[48;16H[34h[?25h[?25l[66;255H0[47;16H[34h[?25h[?25l[66;258H5[47;15H[34h[?25h[?25l[66;258H4[47;14H[34h[?25h[?25l[66;258H3[47;13H[34h[?25h[?25l[66;258H2[47;12H[34h[?25h[?25l[66;258H1[47;11H[34h[?25h[?25l[66;255H1[48;11H[34h[?25h[?25l[66;258H0[48;10H[34h[?25h[?25l[66;255H2,4-8[49;8H[34h[?25h[?25l[66;257H3  [49;3H[34h[?25h[?25l[66;255H1[48;3H[34h[?25h[?25l[66;257H4[48;4H[34h[?25h[?25l[66;257H5[48;5H[34h[?25h[?25l[66;257H6[48;6H[34h[?25h[?25l[66;257H7[48;7H[34h[?25h[?25l[66;257H8[48;8H[34h[?25h[?25l[66;257H9[48;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H51,9[11C8%[48;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_b, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = 0)[0m[66;257H10[48;10H[34h[?25h[66;1H[K[?25l[66;254H51,9[11C8%[48;9H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C51,9[11C8%[66;254H[K[66;254H51,9[11C8%[48;9H[34h[?25h[?25l[66;255H0[47;9H[34h[?25h[?25l[66;255H1[48;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H51,9[11C8%[48;9H[34h[?25h[?25l[66;257H10[48;10H[34h[?25h[?25lGPIO.add_event_detect(r_encoder_b, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[48;101H[K[66;257H9 [48;9H[34h[?25h[?25l[66;255H0[47;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = 0)[0m[66;257H10[47;10H[34h[?25h[66;1H[K[?25l[66;254H50,9[11C8%[47;9H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C50,9[11C8%[66;254H[K[66;254H50,9[11C8%[47;9H[34h[?25h[?25l[66;255H1[48;9H[34h[?25h[?25l[66;255H0[47;9H[34h[?25h[?25l[66;254H49[46;9H[34h[?25h[?25l[66;255H8[45;9H[34h[?25h[?25l[66;255H7[44;9H[34h[?25h[?25l[66;255H6,2-9[43;9H[34h[?25h[?25l[66;255H5,0-1[42;1H[34h[?25h[?25l[66;255H4,2-9[41;9H[34h[?25h[?25l[66;255H3[40;9H[34h[?25h[?25l[66;255H2,9  [39;9H[34h[?25h[?25l[66;255H1[38;9H[34h[?25h[?25l[66;255H2[39;9H[34h[?25h[?25l[66;255H3,2-9[40;9H[34h[?25h[?25l[66;255H4[41;9H[34h[?25h[?25l[66;255H5,0-1[42;1H[34h[?25h[?25l[66;255H6,2-9[43;9H[34h[?25h[?25l[66;255H7,9  [44;9H[34h[?25h[?25l[66;255H8[45;9H[34h[?25h[?25l[66;255H9[46;9H[34h[?25h[?25l[66;254H50[47;9H[34h[?25h[?25l[66;254H49[46;9H[34h[?25h[?25l[66;255H8[45;9H[34h[?25h[?25l[66;255H7[44;9H[34h[?25h[?25l[66;255H6,2-9[43;9H[34h[?25h[?25l[66;255H5,0-1[42;1H[34h[?25h[?25l[66;255H4,2-9[41;9H[34h[?25h[?25l[66;255H3[40;9H[34h[?25h[?25l[66;255H2,9  [39;9H[34h[?25h[?25l[66;255H1[38;9H[34h[?25h[?25l[66;255H0[37;9H[34h[?25h[?25l[66;254H39,2-9[36;9H[34h[?25h[?25l[66;255H8[35;9H[34h[?25h[?25l[66;255H7[34;9H[34h[?25h[?25l[66;255H6[33;9H[34h[?25h[?25l[66;255H5,9  [32;9H[34h[?25h[?25l[66;255H4[31;9H[34h[?25h[?25l[66;255H3[30;9H[34h[?25h[?25l[66;255H2,2-9[29;9H[34h[?25h[?25l[66;255H1[28;9H[34h[?25h[?25l[66;255H0,9  [27;9H[34h[?25h[?25l[66;254H29[26;9H[34h[?25h[?25l[66;255H8[25;9H[34h[?25h[?25l[66;255H7[24;9H[34h[?25h[?25l[66;255H6,0-1[23;1H[34h[?25h[?25l[66;255H5,9  [22;9H[34h[?25h[?25l[66;255H4[21;9H[34h[?25h[?25l[66;255H3[20;9H[34h[?25h[?25l[66;255H2[19;9H[34h[?25h[?25l[66;255H1,0-1[18;1H[34h[?25h[?25l[66;255H0[17;1H[34h[?25h[?25l[66;254H19,9  [16;9H[34h[?25h[?25l[66;254H20,0-1[17;1H[34h[?25h[?25l[66;255H1[18;1H[34h[?25h[?25l[66;255H2,9  [19;9H[34h[?25h[?25l[66;255H3[20;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H23,9[11C8%[20;9H[34h[?25h[?25l[66;255H4[21;9H[34h[?25h[?25l[66;257H10[21;10H[34h[?25h[?25lp[46m([20C)[0m[66;258H2[21;12H[34h[?25h[?25l([20C)[66;257H20[21;20H[34h[?25h[?25l[66;257H19[21;19H[34h[?25h[?25l[66;258H8[21;18H[34h[?25h[?25l[66;258H7[21;17H[34h[?25h[?25l[66;258H6[21;16H[34h[?25h[?25l[66;258H5[21;15H[34h[?25h[?25l[66;258H4[21;14H[34h[?25h[?25l[66;258H3[21;13H[34h[?25h[?25l[46m([20C)[0m[66;258H2[21;12H[34h[?25h[?25l([20C)[66;258H3[21;13H[34h[?25h[?25l_encoder_b, GPIO.IN)[21;32H[K[21;11H[46m([19C)[0m[66;258H2[21;12H[34h[?25h[?25lr_encoder_b, GPIO.I[46mN[0m)[21;11H([19CN[66;258H3[21;13H[34h[?25h[?25l[66;258H4[21;14H[34h[?25h[?25l[66;258H5[21;15H[34h[?25h[?25l[66;258H6[21;16H[34h[?25h[?25l[66;258H7[21;17H[34h[?25h[?25l[66;258H8[21;18H[34h[?25h[?25l[66;258H9[21;19H[34h[?25h[?25l[66;257H20[21;20H[34h[?25h[?25l[66;258H1[21;21H[34h[?25h[?25l[66;258H2[21;22H[34h[?25h[?25l[66;258H3[21;23H[34h[?25h[?25l, GPIO.IN)[21;32H[K[66;258H2[21;22H[34h[?25h[?25la, GPIO.IN)[66;258H3[21;23H[34h[?25h[66;1H[K[?25l[66;254H24,22[10C8%[21;22H[34h[?25h[?25l[66;255H3[20;22H[34h[?25h[?25l[66;255H2[19;22H[34h[?25h[?25l[66;255H1,0-1[18;1H[34h[?25h[?25l[66;255H0[17;1H[34h[?25h[?25l[66;254H19,22 [16;22H[34h[?25h[?25l[66;254H20,0-1[17;1H[34h[?25h[?25l[66;255H1[18;1H[34h[?25h[?25l[66;255H2,22 [19;22H[34h[?25h[?25l[66;255H3[20;22H[34h[?25h[?25l[66;255H4[21;22H[34h[?25h[?25l[66;255H5[22;22H[34h[?25h[?25l[66;255H6,0-1[23;1H[34h[?25h[?25l[66;255H5,22 [22;22H[34h[?25h[?25l[66;255H4[21;22H[34h[?25h[?25l[66;255H3[20;22H[34h[?25h[?25l[66;255H2[19;22H[34h[?25h[?25l[66;255H1,0-1[18;1H[34h[?25h[?25l[66;255H0[17;1H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3216C written[215C20,0-1[9C8%[66;254H[K[66;254H20,0-1[9C8%[17;1H[34h[?25h[?25l[66;254H19,22 [16;22H[34h[?25h[?25l[66;255H8,0-1[15;1H[34h[?25h[?25l[66;255H7[14;1H[34h[?25h[?25l[66;255H6,16 [13;16H[34h[?25h[?25l[66;255H5[12;16H[34h[?25h[?25l[66;255H6[13;16H[34h[?25h[?25l[66;255H7,0-1[14;1H[34h[?25h[?25l[66;255H8[15;1H[34h[?25h[?25l[66;255H9,22 [16;22H[34h[?25h[?25l[66;254H20,0-1[17;1H[34h[?25h[?25l[66;255H1[18;1H[34h[?25h[?25l[66;255H2,22 [19;22H[34h[?25h[?25l[66;255H3[20;22H[34h[?25h[?25l[66;255H4[21;22H[34h[?25h[?25l[66;255H5[22;22H[34h[?25h[?25l[66;255H6,0-1[23;1H[34h[?25h[?25l[66;255H7,20 [24;20H[34h[?25h[?25l[25;17H[46m([0mself[46m)[0m[66;255H8,22[25;22H[34h[?25h[?25l(self)[66;255H9[26;22H[34h[?25h[?25l[66;254H30[27;22H[34h[?25h[?25l[66;255H1,15-22[28;22H[34h[?25h[?25l[66;255H2[29;22H[34h[?25h[?25l[66;255H3,22   [30;22H[34h[?25h[?25l[66;255H4[31;22H[34h[?25h[?25l[66;255H5[32;22H[34h[?25h[?25l[66;255H6,15-22[33;22H[34h[?25h[?25l[66;255H7[34;22H[34h[?25h[?25l[66;255H8[35;22H[34h[?25h[?25l[66;255H9[36;22H[34h[?25h[?25l[66;254H40,22   [37;22H[34h[?25h[?25l[66;255H1[38;22H[34h[?25h[?25l[66;255H2[39;22H[34h[?25h[?25l[66;255H3,15-22[40;22H[34h[?25h[?25l[66;255H4[41;22H[34h[?25h[?25l[66;255H5,0-1  [42;1H[34h[?25h[?25l[66;255H6,15-22[43;22H[34h[?25h[?25l[66;255H7,22   [44;22H[34h[?25h[?25l[66;255H8[45;22H[34h[?25h[?25l[66;255H9[46;22H[34h[?25h[?25l[66;254H50[47;22H[34h[?25h[?25l[66;258H1[47;21H[34h[?25h[?25l[66;258H0[47;20H[34h[?25h[?25l[66;257H19[47;19H[34h[?25h[?25l[66;258H8[47;18H[34h[?25h[?25l[66;258H7[47;17H[34h[?25h[?25l[66;258H6[47;16H[34h[?25h[?25l[66;258H5[47;15H[34h[?25h[?25l[66;258H4[47;14H[34h[?25h[?25l[66;258H3[47;13H[34h[?25h[?25l[66;258H2[47;12H[34h[?25h[?25l[66;258H1[47;11H[34h[?25h[?25l[66;258H0[47;10H[34h[?25h[?25l[66;257H9 [47;9H[34h[?25h[?25l[66;257H10[47;10H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H50,10[10C8%[47;10H[34h[?25h[?25lGPIO.add_event_detect(r_encoder_a, GPIO.BOTH, callback=self.updateEncoder_r, bouncetime = [31m0[0m)[47;101H[K[66;257H9 [47;9H[34h[?25h[66;1H[K[?25l[66;254H50,8[11C8%[47;8H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3215C written[215C50,8[11C8%[66;254H[K[66;254H50,8[11C8%[47;8H[34h[?25h[?25l[66;255H1[48;8H[34h[?25h[?25l[66;255H2,4-8[49;8H[34h[?25h[?25l[66;255H3,1[50;8H[34h[?25h[?25l[66;255H4[51;8H[34h[?25h[?25l[66;255H5[52;8H[34h[?25h[?25l[66;255H6,8  [53;8H[34h[?25h[?25l[66;255H7[54;8H[34h[?25h[?25l[66;255H8[55;8H[34h[?25h[?25l[66;255H9[56;8H[34h[?25h[?25l[66;254H60[57;8H[34h[?25h[?25l[66;255H1,1-8[58;8H[34h[?25h[?25l[66;255H2[59;8H[34h[?25h[?25l[66;255H3[60;8H[34h[?25h[?25l[66;255H4[61;8H[34h[?25h[?25l[66;255H5,3[62;8H[34h[?25h[?25l[66;255H6,1[63;8H[34h[?25h[?25l[66;255H7[64;8H[34h[?25h[?25l[66;255H8,3[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_l-=[31m1[0m[66;1H[K[66;254H69,1-8[8C11%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"-"[0m)[66;254H[K[66;254H70,1-8[8C14%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.lastEncoded_l = self.encoded_l[66;254H[K[66;254H71,3-8[8C17%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.l_enc_pub.publish(self.encoderValue_l)[66;254H[K[66;254H72,1-8[8C20%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[66;254H[K[66;254H73,0-1[8C22%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;5H[33mdef[0m [36mupdateEncoder_r[0m(self, channel):[66;254H[K[66;254H74,8[10C25%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.MSB_r = GPIO.input(r_encoder_a)[66;254H[K[66;254H75,8[10C28%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.LSB_r = GPIO.input(r_encoder_b)[66;254H[K[66;254H76,8[10C31%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right MSB = {}"[0m.format(self.MSB_r))[66;254H[K[66;254H77,8[10C34%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right LSB = {}"[0m.format(self.LSB_r))[66;254H[K[66;254H78,8[10C37%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.encoded_r = (self.MSB_r << [31m1[0m) | self.LSB_r[66;254H[K[66;254H79,1-8[8C40%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.sum_r  = (self.lastEncoded_r << [31m2[0m) | self.encoded_r[66;254H[K[66;254H80,1-8[8C42%[65;8H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("SUM= {}".format(self.sum_r))[0m[66;254H[K[66;254H81,1-8[8C45%[65;8H[34h[?25h[?25l[66;255H0[64;8H[34h[?25h[?25l[66;254H79[63;8H[34h[?25h[?25l[66;255H8,8  [62;8H[34h[?25h[?25l[66;255H7[61;8H[34h[?25h[?25l[66;255H6[60;8H[34h[?25h[?25l[66;255H5[59;8H[34h[?25h[?25l[66;255H4[58;8H[34h[?25h[?25l[66;255H3,0-1[57;1H[34h[?25h[?25l[66;255H2,1-8[56;8H[34h[?25h[?25l[66;255H1,3[55;8H[34h[?25h[?25l[66;255H0,1[54;8H[34h[?25h[?25l[66;254H69[53;8H[34h[?25h[?25l[66;255H8,3[52;8H[34h[?25h[?25l[66;255H7,1[51;8H[34h[?25h[?25l[66;255H6[50;8H[34h[?25h[?25l[66;255H5,3[49;8H[34h[?25h[?25l[66;255H4,1[48;8H[34h[?25h[?25l[66;255H3[47;8H[34h[?25h[?25l[66;255H2[46;8H[34h[?25h[?25l[66;255H1[45;8H[34h[?25h[?25l[66;255H0,8  [44;8H[34h[?25h[?25l[66;254H59[43;8H[34h[?25h[?25l[66;255H8[42;8H[34h[?25h[?25l[66;255H7[41;8H[34h[?25h[?25l[66;255H6[40;8H[34h[?25h[?25l[66;255H5,1-8[39;8H[34h[?25h[?25l[66;255H4[38;8H[34h[?25h[?25l[66;255H3[37;8H[34h[?25h[?25l[66;255H2,4[36;8H[34h[?25h[?25l[66;255H1,8  [35;8H[34h[?25h[?25l[66;255H0[34;8H[34h[?25h[?25l[66;254H49[33;8H[34h[?25h[?25l[66;255H8[32;8H[34h[?25h[?25l[66;255H7[31;8H[34h[?25h[?25l[66;255H6,1-8[30;8H[34h[?25h[?25l[66;255H5,0-1[29;1H[34h[?25h[?25l[66;255H4,1-8[28;8H[34h[?25h[?25l[66;255H3[27;8H[34h[?25h[?25l[66;255H2,8  [26;8H[34h[?25h[?25l[66;255H1[25;8H[34h[?25h[?25l[66;255H0[24;8H[34h[?25h[?25l[66;254H39,1-8[23;8H[34h[?25h[?25l[66;255H8[22;8H[34h[?25h[?25l[66;255H7[21;8H[34h[?25h[?25l[66;255H6[20;8H[34h[?25h[?25l[66;255H5,8  [19;8H[34h[?25h[?25l[66;255H4[18;8H[34h[?25h[?25l[66;255H3[17;8H[34h[?25h[?25l[66;255H2,1-8[16;8H[34h[?25h[?25l[66;255H1[15;8H[34h[?25h[?25l[66;255H0,8  [14;8H[34h[?25h[?25l[66;254H29[13;8H[34h[?25h[?25l[66;255H8[12;8H[34h[?25h[?25l[66;255H7[11;8H[34h[?25h[?25l[66;255H6,0-1[10;1H[34h[?25h[?25l[66;255H5,8  [9;8H[34h[?25h[?25l[66;255H4[8;8H[34h[?25h[?25l[66;255H3[7;8H[34h[?25h[?25l[66;255H2[6;8H[34h[?25h[?25l[66;255H1,0-1[5;1H[34h[?25h[?25l[66;255H0[4;1H[34h[?25h[?25l[66;254H19,8  [3;8H[34h[?25h[?25l[66;255H8,0-1[2;1H[34h[?25h[?25l[66;255H7[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_b = [31m13[0m[66;254H[K[66;254H16,8[10C42%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_a = [31m11[0m[66;254H[K[66;254H15,8[10C40%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#Encoder Right - Use only PULL-UP GPIO PINS!!!! 31,12,29[0m[66;254H[K[66;254H14,8[10C37%[1;8H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H13,0-1[8C34%[1;1H[34h[?25h[?25l[66;255H4,8  [2;8H[34h[?25h[?25l[66;255H5[3;8H[34h[?25h[?25l[66;255H6[4;8H[34h[?25h[?25l[66;255H5[3;8H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;254H[K[66;254H15,8[10C34%[3;8H[34h[?25h[?25l[66;257H9[3;9H[34h[?25h[?25l[66;257H10[3;10H[34h[?25h[?25l[66;258H1[3;11H[34h[?25h[?25l[66;258H2[3;12H[34h[?25h[?25l[66;258H3[3;13H[34h[?25h[?25l[66;258H4[3;14H[34h[?25h[?25l[66;258H5[3;15H[34h[?25h[?25l[66;258H6[3;16H[34h[?25h[?25l[66;258H7[3;17H[34h[?25h[?25l[3;16H[K[66;258H6[3;16H[34h[?25h[?25l[3;15H[K[66;258H5[3;15H[34h[?25h[?25l[31m7[0m[66;258H6[3;16H[34h[?25h[?25l[66;255H6[4;16H[34h[?25h[?25l[66;258H7[4;17H[34h[?25h[?25l[4;16H[K[66;258H6[4;16H[34h[?25h[?25l[4;15H[K[66;258H5[4;15H[34h[?25h[?25l[31m1[0m[66;258H6[4;16H[34h[?25h[?25l[31m1[0m[66;258H7[4;17H[34h[?25h[66;1H[K[4;16H[?25l[66;254H16,16[9C34%[4;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h[?25l[66;3H[K[66;3H[34h[?25h[?25l"encoder_value.py" 100L, 3214C written[215C16,16[9C34%[66;254H[K[66;254H16,16[9C34%[4;16H[34h[?25h[?25l[66;255H7,0-1[5;1H[34h[?25h[?25l[66;255H8[6;1H[34h[?25h[?25l[66;255H9,16 [7;16H[34h[?25h[?25l[66;254H20,0-1[8;1H[34h[?25h[?25l[66;255H1[9;1H[34h[?25h[?25l[66;255H2,16 [10;16H[34h[?25h[?25l[66;255H3[11;16H[34h[?25h[?25l[66;255H4[12;16H[34h[?25h[?25l[66;255H5[13;16H[34h[?25h[?25l[66;255H6,0-1[14;1H[34h[?25h[?25l[66;255H7,16 [15;16H[34h[?25h[?25l[66;255H8[16;16H[34h[?25h[?25l[66;255H9[17;16H[34h[?25h[?25l[66;254H30[18;16H[34h[?25h[?25l[66;255H1,9-16[19;16H[34h[?25h[?25l[66;255H2[20;16H[34h[?25h[?25l[66;255H3,16  [21;16H[34h[?25h[?25l[66;255H4[22;16H[34h[?25h[?25l[66;255H5[23;16H[34h[?25h[?25l[66;255H6,9-16[24;16H[34h[?25h[?25l[66;255H7[25;16H[34h[?25h[?25l[66;255H8[26;16H[34h[?25h[?25l[66;255H9[27;16H[34h[?25h[?25l[66;254H40,16  [28;16H[34h[?25h[?25l[66;255H1[29;16H[34h[?25h[?25l[66;255H2[30;16H[34h[?25h[?25l[66;255H3,9-16[31;16H[34h[?25h[?25l[66;255H4[32;16H[34h[?25h[?25l[66;255H5,0-1 [33;1H[34h[?25h[?25l[66;255H6,9-16[34;16H[34h[?25h[?25l[66;255H7,16  [35;16H[34h[?25h[?25l[66;255H8[36;16H[34h[?25h[?25l[66;255H9[37;16H[34h[?25h[?25l[66;254H50[38;16H[34h[?25h[?25l[66;255H1[39;16H[34h[?25h[?25l[66;255H2,4-8[40;8H[34h[?25h[?25l[66;255H3,9-16[41;16H[34h[?25h[?25l[66;255H2,4-8 [40;8H[34h[?25h[?25l[66;255H1,16 [39;16H[34h[?25h[?25l[66;255H0[38;16H[34h[?25h[?25l[66;254H49[37;16H[34h[?25h[?25l[66;258H5[37;15H[34h[?25h[?25l[66;258H4[37;14H[34h[?25h[?25l[66;258H3[37;13H[34h[?25h[?25l[66;258H2[37;12H[34h[?25h[?25l[66;258H1[37;11H[34h[?25h[?25l[66;258H0[37;10H[34h[?25h[?25l[66;257H9 [37;9H[34h[?25h[?25l[66;257H8[37;8H[34h[?25h[?25l[66;257H9[37;9H[34h[?25h[?25l[66;257H10[37;10H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H49,10[9C34%[37;10H[34h[?25h[?25lGPIO.add_event_detect(l_encoder_b, GPIO.BOTH, callback=self.updateEncoder_l, bouncetime = [31m0[0m)[37;101H[K[66;257H9 [37;9H[34h[?25h[?25l[66;255H8[36;9H[34h[?25h[?25l[66;257H10[36;10H[34h[?25h[?25lGPIO.add_event_detect(l_encoder_a, GPIO.BOTH, callback=self.updateEncoder_l, bouncetime = [31m0[0m)[36;101H[K[66;257H9 [36;9H[34h[?25h[66;1H[K[?25l[66;254H48,8[10C34%[36;8H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h[?25l[66;3H[K[66;3H[34h[?25h[?25l"encoder_value.py" 100L, 3212C written[215C48,8[10C34%[66;254H[K[66;254H48,8[10C34%[36;8H[34h[?25h[?25l[66;257H9[36;9H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H48,9[10C34%[36;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(l_encoder_a, GPIO.BOTH, callback=self.updateEncoder_l, bouncetime = 0)[0m[66;257H10[36;10H[34h[?25h[?25l[66;255H9[37;10H[34h[?25h[?25l[66;257H9 [37;9H[34h[?25h[?25l[34m#GPIO.add_event_detect(l_encoder_b, GPIO.BOTH, callback=self.updateEncoder_l, bouncetime = 0)[0m[66;257H10[37;10H[34h[?25h[66;1H[K[?25l[66;254H49,9[10C34%[37;9H[34h[?25h[?25l[66;254H50[38;9H[34h[?25h[?25l[66;255H1[39;9H[34h[?25h[?25l[66;255H2,4-8[40;8H[34h[?25h[?25l[66;255H3,2-9[41;9H[34h[?25h[?25l[66;255H4[42;9H[34h[?25h[?25l[66;255H3[41;9H[34h[?25h[?25l[66;255H2,4-8[40;8H[34h[?25h[?25l[66;255H1,9  [39;9H[34h[?25h[?25l[66;255H0[38;9H[34h[?25h[?25l[66;254H49[37;9H[34h[?25h[?25l[66;254H50[38;9H[34h[?25h[?25l[66;257H10[38;10H[34h[?25h[?25l[66;258H1[38;11H[34h[?25h[?25l[66;258H2[38;12H[34h[?25h[?25l[66;258H3[38;13H[34h[?25h[?25l[66;258H4[38;14H[34h[?25h[?25l[66;258H5[38;15H[34h[?25h[?25l[66;258H6[38;16H[34h[?25h[?25l[66;258H7[38;17H[34h[?25h[?25l[66;258H8[38;18H[34h[?25h[?25l[66;258H9[38;19H[34h[?25h[?25l[66;257H20[38;20H[34h[?25h[?25l[66;258H1[38;21H[34h[?25h[?25l[66;258H2[38;22H[34h[?25h[?25l[66;258H3[38;23H[34h[?25h[?25l[66;258H4[38;24H[34h[?25h[?25l[66;258H5[38;25H[34h[?25h[?25l[66;258H6[38;26H[34h[?25h[?25l[66;258H7[38;27H[34h[?25h[?25l[66;258H8[38;28H[34h[?25h[?25l[66;258H9[38;29H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 100L, 3214C written[215C50,29[9C34%[66;254H[K[66;254H50,29[9C34%[38;29H[34h[?25h[?25l[66;255H1[39;29H[34h[?25h[?25l[66;255H2,4-8[40;8H[34h[?25h[?25l[66;255H3,22-29[41;29H[34h[?25h[?25l[66;255H4[42;29H[34h[?25h[?25l[66;255H5,16[43;29H[34h[?25h[?25l[66;255H6,29   [44;29H[34h[?25h[?25l[66;255H7[45;29H[34h[?25h[?25l[66;255H8[46;29H[34h[?25h[?25l[66;255H9[47;29H[34h[?25h[?25l[66;254H60[48;29H[34h[?25h[?25l[66;255H1,22-29[49;29H[34h[?25h[?25l[66;255H2[50;29H[34h[?25h[?25l[66;255H3[51;29H[34h[?25h[?25l[66;255H4,20-27[52;27H[34h[?25h[?25l[53;12H[46m([16C)[0m[66;255H5,24-29[53;29H[34h[?25h[?25l[53;12H([16C)[66;255H6,15[54;29H[34h[?25h[?25l[55;22H[46m([3C)[0m[66;255H7,12-26[55;26H[34h[?25h[?25l([3C)[56;12H[46m([16C)[0m[66;255H8,24-29[56;29H[34h[?25h[?25l[56;12H([16C)[66;255H9,15[57;29H[34h[?25h[?25l[58;22H[46m([3C)[0m[66;254H70,12-26[58;26H[34h[?25h[?25l([3C)[66;255H1,24-29[59;29H[34h[?25h[?25l[66;255H2,22[60;29H[34h[?25h[?25l[66;255H3,0-1  [61;1H[34h[?25h[?25l[66;255H4,29 [62;29H[34h[?25h[?25l[66;257H30[62;30H[34h[?25h[?25l[66;258H1[62;31H[34h[?25h[?25l[66;258H2[62;32H[34h[?25h[?25l[66;258H3[62;33H[34h[?25h[?25l[66;258H4[62;34H[34h[?25h[?25l[66;258H5[62;35H[34h[?25h[?25l[66;258H6[62;36H[34h[?25h[?25l[66;258H7[62;37H[34h[?25h[?25l[62;24H[46m([13C)[0m[66;258H8[62;38H[34h[?25h[?25l[62;24H([13C)[66;258H9[62;39H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H74,39[9C34%[62;39H[34h[?25h[?25l[66;257H40[62;40H[34h[?25h[?25l[63;65r[63;1H[L[1;66r[66;254H[K[66;254H75,1[10C33%[63;1H[34h[?25h[?25l[66;255H6[64;1H[34h[?25h[?25l[66;255H7[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right MSB = {}"[0m.format(self.MSB_r))[66;254H[K[66;254H78,1[10C36%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Right LSB = {}"[0m.format(self.LSB_r))[66;254H[K[66;254H79,1[10C38%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.encoded_r = (self.MSB_r << [31m1[0m) | self.LSB_r[66;254H[K[66;254H80,1[10C41%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.sum_r  = (self.lastEncoded_r << [31m2[0m) | self.encoded_r[66;254H[K[66;254H81,1[10C44%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("SUM= {}".format(self.sum_r))[0m[66;254H[K[66;254H82,1[10C47%[65;1H[34h[?25h[?25l[66;255H1[64;1H[34h[?25h[?25l[66;255H0[63;1H[34h[?25h[?25l[66;254H79[62;1H[34h[?25h[?25l[66;255H8[61;1H[34h[?25h[?25l[66;255H7[60;1H[34h[?25h[?25l[66;255H6[59;1H[34h[?25h[?25l[66;255H5[58;1H[34h[?25h[?25l[66;255H4[57;1H[34h[?25h[?25l[66;257H2[57;2H[34h[?25h[?25l[66;255H5,1[58;1H[34h[?25h[?25l[66;257H2-9[58;9H[34h[?25h[?25lp[66;257H3-10[58;10H[34h[?25h[?25lr[66;257H4-11[58;11H[34h[?25h[?25li[66;257H5-12[58;12H[34h[?25h[?25ln[66;257H6-13[58;13H[34h[?25h[?25l[36mprint[0m[66;257H7-14[58;14H[34h[?25h[?25l([66;257H8-15[58;15H[34h[?25h[?25l)[46m()[0m[66;257H9-16[58;16H[34h[?25h[?25l[66;257H8-15[58;15H[34h[?25h[?25l[31m[46m"[0m[31m)
        self.MSB_r = GPIO.input(r_encoder_a)
        self.LSB_r = GPIO.input(r_encoder_b)
        print([0m[1CRight MSB = {}[1C[31m.format(self.MSB_r))
        print([0m[1CRight LSB = {}[1C[31m.format(self.LSB_r))
        self.encoded_r = (self.MSB_r << 1) | self.LSB_r
        self.sum_r  = (self.lastEncoded_r << 2) | self.encoded_r
        #print("[0mSUM= {}[31m".format(self.sum_r))[0m[58;14H([31m"[0m[66;257H9-16[58;16H[34h[?25h[?25l[31m"[0m)
        self.MSB_r = GPIO.input(r_encoder_a)
        self.LSB_r = GPIO.input(r_encoder_b)
        [36mprint[0m([1C[31mRight MSB = {}[0m[1C.format(self.MSB_r))
        [36mprint[0m([1C[31mRight LSB = {}[0m[1C.format(self.LSB_r))
        self.encoded_r = (self.MSB_r << [1C) | self.LSB_r
        self.sum_r  = (self.lastEncoded_r << [1C) | self.encoded_r
        [34m#print("SUM= {}".format(self.sum_r))[58;16H[34h[?25h[?25l[0m[31mI"[0m)[66;257H10-17[58;17H[34h[?25h[?25l[31mn"[0m)[66;258H1-18[58;18H[34h[?25h[?25l[31ms"[0m)[66;258H2-19[58;19H[34h[?25h[?25l[31mi"[0m)[66;258H3-20[58;20H[34h[?25h[?25l[31md"[0m)[66;258H4-21[58;21H[34h[?25h[?25l[31me"[0m)[66;258H5-22[58;22H[34h[?25h[?25l[31m "[0m)[66;258H6-23[58;23H[34h[?25h[?25l[31mf"[0m)[66;258H7-24[58;24H[34h[?25h[?25l[31mu"[0m)[66;258H8-25[58;25H[34h[?25h[?25l[31mn"[0m)[66;258H9-26[58;26H[34h[?25h[?25l[31mc"[0m)[66;257H20-27[58;27H[34h[?25h[?25l[31mtio"[0m)[66;258H3-30[58;30H[34h[?25h[?25l[31mn"[0m)[66;258H4-31[58;31H[34h[?25h[?25l[31m "[0m)[66;258H5-32[58;32H[34h[?25h[?25l[31m"[0m)[58;33H[K[66;258H4-31[58;31H[34h[?25h[?25l[58;14H[46m([17C)[0m[66;258H5-32[58;32H[34h[?25h[?25l[58;14H([17C)[59;32H[46m([11C)[0m[66;255H6,32   [59;32H[34h[?25h[?25l([11C)[60;32H[46m([11C)[0m[66;255H7[60;32H[34h[?25h[?25l([11C)[66;255H8[61;32H[34h[?25h[?25l[66;255H9[62;32H[34h[?25h[?25l[66;254H80,25-32[63;32H[34h[?25h[?25l[66;258H4-31[63;31H[34h[?25h[?25l[66;258H5-32[63;32H[34h[?25h[?25l[66;258H6-33[63;33H[34h[?25h[?25l[66;258H7-34[63;34H[34h[?25h[?25l[66;258H8-35[63;35H[34h[?25h[?25l[66;258H9-36[63;36H[34h[?25h[?25l[66;257H30-37[63;37H[34h[?25h[?25l[66;258H1-38[63;38H[34h[?25h[?25l[66;258H2-39[63;39H[34h[?25h[?25l[66;258H3-40[63;40H[34h[?25h[?25l[66;255H1[64;40H[34h[?25h[?25l[66;255H2[65;40H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[34m#print("Before IF")[0m[66;254H[K[66;254H83,21-28      50%[65;28H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mif[0m (self.sum_r == [31m13[0m) [33mor[0m (self.sum_r == [31m4[0m) [33mor[0m (self.sum_r == [31m2[0m) [33mor[0m (self.sum_r == [31m11[0m):[66;254H[K[66;254H84,35-40      52%[65;40H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_r+=[31m1[0m[66;254H[K[66;254H85,25-39      55%[65;39H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"+"[0m)[66;254H[K[66;254H86,13-27      58%[65;22H[46m([3C)[34h[?25h[?25l[0m([3C)[66;255H5,25-39[64;39H[34h[?25h[?25l[66;255H4,35-40[63;40H[34h[?25h[?25l[66;255H3,21-28[62;28H[34h[?25h[?25l[66;255H2,33-40[61;40H[34h[?25h[?25l[66;258H2-39[61;39H[34h[?25h[?25l[66;257H29-36[61;36H[34h[?25h[?25l[66;258H7-34[61;34H[34h[?25h[?25l[66;258H6-33[61;33H[34h[?25h[?25l[66;258H3-30[61;30H[34h[?25h[?25l[66;258H2-29[61;29H[34h[?25h[?25l[66;258H1-28[61;28H[34h[?25h[?25l[66;258H0-27[61;27H[34h[?25h[?25l[66;257H17-24[61;24H[34h[?25h[?25l[66;258H6-23[61;23H[34h[?25h[?25l[66;258H3-20[61;20H[34h[?25h[?25l[66;258H1-18[61;18H[34h[?25h[?25l[66;258H0-17[61;17H[34h[?25h[?25l[66;257H9-16 [61;16H[34h[?25h[?25l[66;257H8-15[61;15H[34h[?25h[?25l[66;257H7-14[61;14H[34h[?25h[?25l[66;257H6-13[61;13H[34h[?25h[?25l[66;257H5-12[61;12H[34h[?25h[?25l[66;257H4-11[61;11H[34h[?25h[?25l[66;257H3-10[61;10H[34h[?25h[?25l[36mprint[0m([31m"SUM= {}"[0m.format(self.sum_r))[61;44H[K[66;257H2-9 [61;9H[34h[?25h[?25l[66;255H3[62;9H[34h[?25h[?25l[66;257H3-10[62;10H[34h[?25h[?25l[36mprint[0m([31m"Before IF"[0m)[62;27H[K[66;257H2-9 [62;9H[34h[?25h[?25l[66;255H4,4[63;9H[34h[?25h[?25l[66;255H5,2[64;9H[34h[?25h[?25l[66;255H6[65;9H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mif[0m (self.sum_r == [31m14[0m) [33mor[0m (self.sum_r == [31m7[0m) [33mor[0m (self.sum_r == [31m1[0m) [33mor[0m (self.sum_r == [31m8[0m):[66;254H[K[66;254H87,4-9[8C61%[65;9H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17Hself.encoderValue_r-=[31m1[0m[66;254H[K[66;254H88,2-9[8C63%[65;9H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;17H[36mprint[0m([31m"-"[0m)[66;254H[K[66;254H89,2-9[8C66%[65;9H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.lastEncoded_r = self.encoded_r[66;254H[K[66;254H90,4-9[8C69%[65;9H[34h[?25h[?25l[66;254H89,2[64;9H[34h[?25h[?25l[66;255H8[63;9H[34h[?25h[?25l[66;255H7,4[62;9H[34h[?25h[?25l[66;255H6,2[61;9H[34h[?25h[?25l[66;255H7,4[62;9H[34h[?25h[?25l[66;255H8,2[63;9H[34h[?25h[?25l[66;255H7,4[62;9H[34h[?25h[?25l[66;255H6,2[61;9H[34h[?25h[?25l[66;255H5[60;9H[34h[?25h[?25l[66;257H3-17[60;17H[34h[?25h[?25l[66;257H4-18[60;18H[34h[?25h[?25l[66;257H5-19[60;19H[34h[?25h[?25l[66;257H6-20[60;20H[34h[?25h[?25l[66;257H7-21[60;21H[34h[?25h[?25l[66;257H8-22[60;22H[34h[?25h[?25l[66;257H9-23[60;23H[34h[?25h[?25l[61;22H[46m([3C)[0m[66;255H6[61;23H[34h[?25h[?25l([3C)[66;255H7,18-23[62;23H[34h[?25h[?25l[66;255H8,9-23 [63;23H[34h[?25h[?25l[64;22H[46m([3C)[0m[66;255H9[64;23H[34h[?25h[?25l([3C)[66;254H90,18-23[65;23H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hself.r_enc_pub.publish(self.encoderValue_r)[66;254H[K[66;254H91,16-23      72%[65;23H[34h[?25h[?25l[1;65r[65;1H
[1;66r[66;254H[K[66;254H92,1[10C75%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[66;254H[K[66;254H93,1[10C77%[65;1H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;1H[33mif[0m __name__ == [31m"__main__"[0m:[66;254H[K[66;254H94,23[9C80%[65;23H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;5H[33mtry[0m:[66;254H[K[66;254H95,9[10C83%[65;9H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hencoder_value()[66;254H[K[66;254H96,16-23      86%[65;22H[46m()[34h[?25h[?25l[1;65r[0m[65;1H
[1;66r[65;9Hrospy.spin()[66;254H[K[66;254H97,14-21      88%[64;22H()[65;19H[46m()[34h[?25h[?25l[1;65r[0m[65;1H
[1;66r[65;5H[33mexcept[0m:[66;254H[K[66;254H98,12[9C91%[64;19H()[65;12H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9Hrospy.ROSInterruptException[66;254H[K[66;254H99,23[9C94%[65;23H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[36mprint[0m([31m"Exception"[0m)[66;254H[K[66;254H100,16-23     97%[65;23H[34h[?25h[?25l[1;65r[65;1H
[1;66r[65;9H[33mpass[0m[66;254H[K[66;254H101,6-13      Bot[65;13H[34h[?25h[?25l[66;256H0,16-23[64;23H[34h[?25h[?25l[66;254H99,23    [63;23H[34h[?25h[?25l[66;255H8,12[62;12H[34h[?25h[?25l[61;19H[46m()[0m[66;255H7,14-21[61;21H[34h[?25h[?25l[60;22H[46m()[0m[61;19H()[66;255H6,16-23[60;23H[34h[?25h[?25l()[66;255H5,9    [59;9H[34h[?25h[?25l[66;255H4,23[58;23H[34h[?25h[?25l[66;255H3,1 [57;1H[34h[?25h[?25l[66;255H2[56;1H[34h[?25h[?25l[66;255H1,16-23[55;23H[34h[?25h[?25l[53;22H[46m([3C)[0m[66;254H89,9-23 [53;23H[34h[?25h[66;1H[K[53;22H[?25l[66;254H89,8-22[7CBot[53;22H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 101L, 3238C written[215C89,8-22[7CBot[66;254H[K[66;254H89,8-22[7CBot[53;22H[34h[?25h[?25l([3C)[66;255H8[52;22H[34h[?25h[?25l[66;255H7,17-22[51;22H[34h[?25h[?25l[50;22H[46m([3C)[0m[66;255H6,8-22 [50;22H[34h[?25h[?25l([3C)[66;255H5[49;22H[34h[?25h[?25l[66;255H4,17-22[48;22H[34h[?25h[?25l[66;255H3,15[47;22H[34h[?25h[?25l[66;255H2[46;22H[34h[?25h[?25l[66;255H1[45;22H[34h[?25h[?25l[66;255H0[44;22H[34h[?25h[?25l[66;254H79,22   [43;22H[34h[?25h[?25l[66;255H8[42;22H[34h[?25h[?25l[66;255H7[41;22H[34h[?25h[?25l[66;255H6[40;22H[34h[?25h[?25l[66;255H5,15-22[39;22H[34h[?25h[?25l[66;255H4,22   [38;22H[34h[?25h[?25l[66;255H3,0-1[37;1H[34h[?25h[?25l[66;255H2,15-22[36;22H[34h[?25h[?25l[66;255H1,17[35;22H[34h[?25h[?25l[34;22H[46m([3C)[0m[66;255H0,8-22 [34;22H[34h[?25h[?25l([3C)[66;254H69[33;22H[34h[?25h[?25l[66;255H8,17-22[32;22H[34h[?25h[?25l[31;22H[46m([3C)[0m[66;255H7,8-22 [31;22H[34h[?25h[?25l([3C)[66;255H6[30;22H[34h[?25h[?25l[66;255H5,17-22[29;22H[34h[?25h[?25l[66;255H4,15[28;22H[34h[?25h[?25l[66;255H3[27;22H[34h[?25h[?25l[66;255H2[26;22H[34h[?25h[?25l[66;255H1[25;22H[34h[?25h[?25l[66;255H0,22   [24;22H[34h[?25h[?25l[66;254H59[23;22H[34h[?25h[?25l[66;255H8[22;22H[34h[?25h[?25l[66;255H7[21;22H[34h[?25h[?25l[66;255H6[20;22H[34h[?25h[?25l[66;255H5,9-22[19;22H[34h[?25h[?25l[66;255H4,15-22[18;22H[34h[?25h[?25l[66;255H3[17;22H[34h[?25h[?25l[66;255H2,4-8  [16;8H[34h[?25h[?25l[66;255H1,22 [15;22H[34h[?25h[?25l[66;255H0[14;22H[34h[?25h[?25l[66;254H49[13;22H[34h[?25h[?25l[66;255H8[12;22H[34h[?25h[?25l[66;255H7[11;22H[34h[?25h[?25l[66;255H6,15-22[10;22H[34h[?25h[?25l[66;255H5,0-1  [9;1H[34h[?25h[?25l[66;255H4,15-22[8;22H[34h[?25h[?25l[66;255H3[7;22H[34h[?25h[?25l[66;255H2,22   [6;22H[34h[?25h[?25l[66;255H1[5;22H[34h[?25h[?25l[66;255H0[4;22H[34h[?25h[?25l[66;254H39,15-22[3;22H[34h[?25h[?25l[66;255H8[2;22H[34h[?25h[?25l[66;255H7[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.sum_l = [31m0[0m[66;1H[K[66;254H36,15-22      97%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.LSB_l = [31m0[0m[66;254H[K[66;254H35,22[9C94%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.MSB_l = [31m0[0m[66;254H[K[66;254H34,22[9C91%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.encoderValue_l = [31m0[0m[66;254H[K[66;254H33,22[9C88%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.lastEncoded_l = [31m0[0m[66;254H[K[66;254H32,15-22      86%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.r_enc_pub = rospy.Publisher([31m"right_encoder"[0m, Int32, queue_size=[31m10[0m)[66;254H[K[66;254H31,15-22      83%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hself.l_enc_pub = rospy.Publisher([31m"left_encoder"[0m, Int32, queue_size=[31m10[0m)[66;254H[K[66;254H30,22[9C80%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;9Hrospy.init_node([31m"encoder_value"[0m)[66;254H[K[66;254H29,22[9C77%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;5H[33mdef[0m [36m__init__[0m[46m([0mself[46m)[0m:[66;254H[K[66;254H28,22[9C75%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[33mclass[0m [36mencoder_value[0m:[2;17H(self)[66;254H[K[66;254H27,20[9C72%[1;20H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H26,0-1[8C69%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(r_encoder_b, GPIO.IN)[66;254H[K[66;254H25,22[9C66%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(r_encoder_a, GPIO.IN)[66;254H[K[66;254H24,22[9C63%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_b, GPIO.IN)[66;254H[K[66;254H23,22[9C61%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setup(l_encoder_a, GPIO.IN)[66;254H[K[66;254H22,22[9C58%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H21,0-1[8C55%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H20,0-1[8C52%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1HGPIO.setmode(GPIO.BOARD)[66;254H[K[66;254H19,22[9C50%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H18,0-1[8C47%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H17,0-1[8C44%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_b = [31m11[0m[66;254H[K[66;254H16,16[9C41%[1;16H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hr_encoder_a = [31m7[0m[66;254H[K[66;254H15,15[9C38%[1;15H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#Encoder Right - Use only PULL-UP GPIO PINS!!!! 31,12,29[0m[66;254H[K[66;254H14,22[9C36%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H13,0-1[8C33%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hl_encoder_b = [31m29[0m[66;254H[K[66;254H12,16[9C30%[1;16H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1Hl_encoder_a = [31m31[0m[66;254H[K[66;254H11,16[9C27%[1;16H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H10,0-1[8C25%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#Encoder Left - Use only PULL-UP GPIO PINS!!![0m[66;254H[K[66;254H9,22[10C22%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H8,0-1[9C19%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[35mfrom[0m std_msgs.msg [35mimport[0m Int32[66;254H[K[66;254H7,22[10C16%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[35mimport[0m Jetson.GPIO [33mas[0m GPIO[66;254H[K[66;254H6,22[10C13%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[35mimport[0m rospy[66;254H[K[66;254H5,12[10C11%[1;12H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H4,0-1[10C8%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#REFERENCE CODE FROM ENCODER PRODUCT PAGE ROBU.IN ORANGE ROTORY ENCODER[0m[66;254H[K[66;254H3,22[11C5%[1;22H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[66;254H[K[66;254H2,0-1[10C2%[1;1H[34h[?25h[?25l[1;65r[1;1H[L[1;66r[1;1H[34m#!/usr/bin/python[0m[66;254H[K[66;254H1,17[10CTop[1;17H[34h[?25h[?25l[66;254H2,0-1[2;1H[34h[?25h[?25l[66;254H3,22 [3;22H[34h[?25h[?25l[66;254H4,0-1[4;1H[34h[?25h[?25l[66;254H5,12 [5;12H[34h[?25h[?25l[66;254H6,2[6;22H[34h[?25h[?25l[66;254H7[7;22H[34h[?25h[?25l[66;254H8,0-1[8;1H[34h[?25h[?25l[66;254H9,22 [9;22H[34h[?25h[?25l[66;254H10,0-1[10;1H[34h[?25h[?25l[66;255H1,16 [11;16H[34h[?25h[?25l[66;255H2[12;16H[34h[?25h[?25l[66;255H3,0-1[13;1H[34h[?25h[?25l[66;255H4,22 [14;22H[34h[?25h[?25l[66;255H5,15[15;15H[34h[?25h[?25l[66;255H6,16[16;16H[34h[?25h[?25l[66;255H5,15[15;15H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;254H[K[66;254H15,15[9CTop[15;15H[34h[?25h[?25l[66;258H6[15;16H[34h[?25h[?25l[15;15H[K[66;258H5[15;15H[34h[?25h[?25l[31m1[0m[66;258H6[15;16H[34h[?25h[?25l[31m1[0m[66;258H7[15;17H[34h[?25h[?25l[66;255H6[16;17H[34h[?25h[?25l[16;16H[K[66;258H6[16;16H[34h[?25h[?25l[16;15H[K[66;258H5[16;15H[34h[?25h[?25l[31m7[0m[66;258H6[16;16H[34h[?25h[66;1H[K[16;15H[?25l[66;254H16,15[9CTop[16;15H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 101L, 3238C written[215C16,15[9CTop[66;254H[K[66;254H16,15[9CTop[16;15H[34h[?25h[?25l[66;255H5[15;15H[34h[?25h[?25l[66;255H4[14;15H[34h[?25h[?25l[66;255H5[15;15H[34h[?25h[?25l[66;255H6[16;15H[34h[?25h[?25l[66;255H5[15;15H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H15,15[9CTop[15;15H[34h[?25h[?25l[66;258H6[15;16H[34h[?25h[?25l[66;258H7[15;17H[34h[?25h[?25l[15;16H[K[66;258H6[15;16H[34h[?25h[?25l[31m3[0m[66;258H7[15;17H[34h[?25h[66;1H[K[15;16H[?25l[66;254H15,16[9CTop[15;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 101L, 3238C written[215C15,16[9CTop[66;254H[K[66;254H15,16[9CTop[15;16H[34h[?25h[?25l[66;255H4[14;16H[34h[?25h[?25l[66;255H5[15;16H[34h[?25h[?25l[66;255H6,15[16;15H[34h[?25h[?25l[66;1H[1m-- INSERT --[0m[66;13H[K[66;254H16,15[9CTop[16;15H[34h[?25h[?25l[66;258H6[16;16H[34h[?25h[?25l[16;15H[K[66;258H5[16;15H[34h[?25h[?25l[31m1[0m[66;258H6[16;16H[34h[?25h[?25l[31m1[0m[66;258H7[16;17H[34h[?25h[66;1H[K[16;16H[?25l[66;254H16,16[9CTop[16;16H[34h[?25h[?25l[66;254H[K[66;1H:[34h[?25hw[?25l[34h[?25h[?25l"encoder_value.py" 101L, 3239C written[215C16,16[9CTop[66;254H[K[66;254H16,16[9CTop[16;16H[34h[?25h[?25l[66;255H5[15;16H[34h[?25h[?25l[66;255H4[14;16H[34h[?25h[?25l[66;255H3,0-1[13;1H[34h[?25h[?25l[66;255H2,16 [12;16H[34h[?25h[?25l[66;255H1[11;16H[34h[?25h[?25l[66;255H2[12;16H[34h[?25h[?25l[66;255H3,0-1[13;1H[34h[?25h[?25l[66;255H2,16 [12;16H[34h[?25h[?25l[66;255H1[11;16H[34h[?25h[?25l[66;255H2[12;16H[34h[?25h[?25l[66;255H3,0-1[13;1H[34h[?25h[?25l[66;255H4,16 [14;16H[34h[?25h[?25l[66;255H5[15;16H[34h[?25h[?25l[66;255H6[16;16H[34h[?25h[?25l[66;255H7,0-1[17;1H[34h[?25h[?25l[66;255H8[18;1H[34h[?25h[?25l[66;255H9,16 [19;16H[34h[?25h[?25l[66;254H20,0-1[20;1H[34h[?25h[?25l[66;255H1[21;1H[34h[?25h[?25l[66;255H2,16 [22;16H[34h[?25h[?25l[66;255H3[23;16H[34h[?25h[?25l[66;255H4[24;16H[34h[?25h[?25l[66;255H5[25;16H[34h[?25h[?25l[66;255H6,0-1[26;1H[34h[?25h[?25l[66;255H7,16 [27;16H[34h[?25h[?25l[66;255H8[28;16H[34h[?25h[?25l[66;255H9[29;16H[34h[?25h[?25l[66;254H30[30;16H[34h[?25h[?25l[66;255H1,9-16[31;16H[34h[?25h[?25l[66;255H2[32;16H[34h[?25h[?25l[66;255H3,16  [33;16H[34h[?25h[?25l[66;255H4[34;16H[34h[?25h[?25l[66;255H5[35;16H[34h[?25h[?25l[66;255H6,9-16[36;16H[34h[?25h[?25l[66;255H7[37;16H[34h[?25h[?25l[66;255H8[38;16H[34h[?25h[?25l[66;255H9[39;16H[34h[?25h[?25l[66;254H40,16  [40;16H[34h[?25h[?25l[66;255H1[41;16H[34h[?25h[?25l[66;255H2[42;16H[34h[?25h[?25l[66;255H3,9-16[43;16H[34h[?25h[?25l[66;255H4[44;16H[34h[?25h[?25l[66;255H5,0-1 [45;1H[34h[?25h[?25l[66;255H6,9-16[46;16H[34h[?25h[?25l[66;255H7,16  [47;16H[34h[?25h[?25l[66;255H8[48;16H[34h[?25h[?25l[66;258H5[48;15H[34h[?25h[?25l[66;258H4[48;14